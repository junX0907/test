
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037bc  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b0  080039a0  080039a0  000049a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004250  08004250  000060a4  2**0
                  CONTENTS
  4 .ARM          00000000  08004250  08004250  000060a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004250  08004250  000060a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004250  08004250  00005250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004254  08004254  00005254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08004258  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  200000a4  080042fc  000060a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080042fc  0000622c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d306  00000000  00000000  000060cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b3  00000000  00000000  000133d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00015988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdd  00000000  00000000  000168e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b6a  00000000  00000000  000174bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013753  00000000  00000000  00031027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096c67  00000000  00000000  0004477a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db3e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f44  00000000  00000000  000db424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000df368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000a4 	.word	0x200000a4
 8000200:	00000000 	.word	0x00000000
 8000204:	08003988 	.word	0x08003988

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000a8 	.word	0x200000a8
 8000220:	08003988 	.word	0x08003988

08000224 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800022a:	4b10      	ldr	r3, [pc, #64]	@ (800026c <MX_DMA_Init+0x48>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a0f      	ldr	r2, [pc, #60]	@ (800026c <MX_DMA_Init+0x48>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6153      	str	r3, [r2, #20]
 8000236:	4b0d      	ldr	r3, [pc, #52]	@ (800026c <MX_DMA_Init+0x48>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000242:	2200      	movs	r2, #0
 8000244:	2100      	movs	r1, #0
 8000246:	2010      	movs	r0, #16
 8000248:	f000 fc9b 	bl	8000b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800024c:	2010      	movs	r0, #16
 800024e:	f000 fcb4 	bl	8000bba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	2100      	movs	r1, #0
 8000256:	2011      	movs	r0, #17
 8000258:	f000 fc93 	bl	8000b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800025c:	2011      	movs	r0, #17
 800025e:	f000 fcac 	bl	8000bba <HAL_NVIC_EnableIRQ>

}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40021000 	.word	0x40021000

08000270 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000276:	4b14      	ldr	r3, [pc, #80]	@ (80002c8 <MX_GPIO_Init+0x58>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	4a13      	ldr	r2, [pc, #76]	@ (80002c8 <MX_GPIO_Init+0x58>)
 800027c:	f043 0310 	orr.w	r3, r3, #16
 8000280:	6193      	str	r3, [r2, #24]
 8000282:	4b11      	ldr	r3, [pc, #68]	@ (80002c8 <MX_GPIO_Init+0x58>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	f003 0310 	and.w	r3, r3, #16
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028e:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <MX_GPIO_Init+0x58>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <MX_GPIO_Init+0x58>)
 8000294:	f043 0304 	orr.w	r3, r3, #4
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <MX_GPIO_Init+0x58>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0304 	and.w	r3, r3, #4
 80002a2:	60bb      	str	r3, [r7, #8]
 80002a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a6:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <MX_GPIO_Init+0x58>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a07      	ldr	r2, [pc, #28]	@ (80002c8 <MX_GPIO_Init+0x58>)
 80002ac:	f043 0308 	orr.w	r3, r3, #8
 80002b0:	6193      	str	r3, [r2, #24]
 80002b2:	4b05      	ldr	r3, [pc, #20]	@ (80002c8 <MX_GPIO_Init+0x58>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0308 	and.w	r3, r3, #8
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]

}
 80002be:	bf00      	nop
 80002c0:	3714      	adds	r7, #20
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d0:	4b12      	ldr	r3, [pc, #72]	@ (800031c <MX_I2C1_Init+0x50>)
 80002d2:	4a13      	ldr	r2, [pc, #76]	@ (8000320 <MX_I2C1_Init+0x54>)
 80002d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002d6:	4b11      	ldr	r3, [pc, #68]	@ (800031c <MX_I2C1_Init+0x50>)
 80002d8:	4a12      	ldr	r2, [pc, #72]	@ (8000324 <MX_I2C1_Init+0x58>)
 80002da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <MX_I2C1_Init+0x50>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <MX_I2C1_Init+0x50>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <MX_I2C1_Init+0x50>)
 80002ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f0:	4b0a      	ldr	r3, [pc, #40]	@ (800031c <MX_I2C1_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002f6:	4b09      	ldr	r3, [pc, #36]	@ (800031c <MX_I2C1_Init+0x50>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fc:	4b07      	ldr	r3, [pc, #28]	@ (800031c <MX_I2C1_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <MX_I2C1_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000308:	4804      	ldr	r0, [pc, #16]	@ (800031c <MX_I2C1_Init+0x50>)
 800030a:	f001 f9bf 	bl	800168c <HAL_I2C_Init>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000314:	f000 f901 	bl	800051a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	200000c0 	.word	0x200000c0
 8000320:	40005400 	.word	0x40005400
 8000324:	000186a0 	.word	0x000186a0

08000328 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000330:	f107 0310 	add.w	r3, r7, #16
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a15      	ldr	r2, [pc, #84]	@ (8000398 <HAL_I2C_MspInit+0x70>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d123      	bne.n	8000390 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b14      	ldr	r3, [pc, #80]	@ (800039c <HAL_I2C_MspInit+0x74>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a13      	ldr	r2, [pc, #76]	@ (800039c <HAL_I2C_MspInit+0x74>)
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b11      	ldr	r3, [pc, #68]	@ (800039c <HAL_I2C_MspInit+0x74>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0308 	and.w	r3, r3, #8
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000360:	23c0      	movs	r3, #192	@ 0xc0
 8000362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000364:	2312      	movs	r3, #18
 8000366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000368:	2303      	movs	r3, #3
 800036a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036c:	f107 0310 	add.w	r3, r7, #16
 8000370:	4619      	mov	r1, r3
 8000372:	480b      	ldr	r0, [pc, #44]	@ (80003a0 <HAL_I2C_MspInit+0x78>)
 8000374:	f000 fff6 	bl	8001364 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000378:	4b08      	ldr	r3, [pc, #32]	@ (800039c <HAL_I2C_MspInit+0x74>)
 800037a:	69db      	ldr	r3, [r3, #28]
 800037c:	4a07      	ldr	r2, [pc, #28]	@ (800039c <HAL_I2C_MspInit+0x74>)
 800037e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000382:	61d3      	str	r3, [r2, #28]
 8000384:	4b05      	ldr	r3, [pc, #20]	@ (800039c <HAL_I2C_MspInit+0x74>)
 8000386:	69db      	ldr	r3, [r3, #28]
 8000388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000390:	bf00      	nop
 8000392:	3720      	adds	r7, #32
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40005400 	.word	0x40005400
 800039c:	40021000 	.word	0x40021000
 80003a0:	40010c00 	.word	0x40010c00

080003a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003aa:	f000 fa8d 	bl	80008c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003ae:	f000 f873 	bl	8000498 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003b2:	f7ff ff5d 	bl	8000270 <MX_GPIO_Init>
	MX_DMA_Init();
 80003b6:	f7ff ff35 	bl	8000224 <MX_DMA_Init>
	MX_TIM6_Init();
 80003ba:	f000 f937 	bl	800062c <MX_TIM6_Init>
	MX_USART2_Init();
 80003be:	f000 f989 	bl	80006d4 <MX_USART2_Init>
	MX_I2C1_Init();
 80003c2:	f7ff ff83 	bl	80002cc <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();                           //OLED初始
 80003c6:	f002 ffc3 	bl	8003350 <OLED_Init>
	OLED_Clear();                         //清屏
 80003ca:	f003 f80f 	bl	80033ec <OLED_Clear>
	//上面的初始化以及清屏的代码在一开始处一定要写
	OLED_ShowString(0, 0, "UNICORN_LI", 16, 1);    //反相显示8X16字符串
 80003ce:	2301      	movs	r3, #1
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	2310      	movs	r3, #16
 80003d4:	4a2d      	ldr	r2, [pc, #180]	@ (800048c <main+0xe8>)
 80003d6:	2100      	movs	r1, #0
 80003d8:	2000      	movs	r0, #0
 80003da:	f003 f91f 	bl	800361c <OLED_ShowString>
	OLED_ShowString(0, 2, "unicorn_li_123", 12, 0);    //正相显示6X8字符串
 80003de:	2300      	movs	r3, #0
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	230c      	movs	r3, #12
 80003e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000490 <main+0xec>)
 80003e6:	2102      	movs	r1, #2
 80003e8:	2000      	movs	r0, #0
 80003ea:	f003 f917 	bl	800361c <OLED_ShowString>

	OLED_ShowCHinese(0, 4, 0, 1); //反相显示汉字“独”
 80003ee:	2301      	movs	r3, #1
 80003f0:	2200      	movs	r2, #0
 80003f2:	2104      	movs	r1, #4
 80003f4:	2000      	movs	r0, #0
 80003f6:	f003 f9cd 	bl	8003794 <OLED_ShowCHinese>
	OLED_ShowCHinese(16, 4, 1, 1); //反相显示汉字“角”
 80003fa:	2301      	movs	r3, #1
 80003fc:	2201      	movs	r2, #1
 80003fe:	2104      	movs	r1, #4
 8000400:	2010      	movs	r0, #16
 8000402:	f003 f9c7 	bl	8003794 <OLED_ShowCHinese>
	OLED_ShowCHinese(32, 4, 2, 1); //反相显示汉字“兽”
 8000406:	2301      	movs	r3, #1
 8000408:	2202      	movs	r2, #2
 800040a:	2104      	movs	r1, #4
 800040c:	2020      	movs	r0, #32
 800040e:	f003 f9c1 	bl	8003794 <OLED_ShowCHinese>
	OLED_ShowCHinese(0, 6, 0, 0); //正相显示汉字“独”
 8000412:	2300      	movs	r3, #0
 8000414:	2200      	movs	r2, #0
 8000416:	2106      	movs	r1, #6
 8000418:	2000      	movs	r0, #0
 800041a:	f003 f9bb 	bl	8003794 <OLED_ShowCHinese>
	OLED_ShowCHinese(16, 6, 1, 0); //正相显示汉字“角”
 800041e:	2300      	movs	r3, #0
 8000420:	2201      	movs	r2, #1
 8000422:	2106      	movs	r1, #6
 8000424:	2010      	movs	r0, #16
 8000426:	f003 f9b5 	bl	8003794 <OLED_ShowCHinese>
	OLED_ShowCHinese(32, 6, 2, 0); //正相显示汉字“兽”
 800042a:	2300      	movs	r3, #0
 800042c:	2202      	movs	r2, #2
 800042e:	2106      	movs	r1, #6
 8000430:	2020      	movs	r0, #32
 8000432:	f003 f9af 	bl	8003794 <OLED_ShowCHinese>

	OLED_ShowNum(48, 4, 6, 1, 16, 0); //正相显示1位8X16数字“6”
 8000436:	2300      	movs	r3, #0
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	2310      	movs	r3, #16
 800043c:	9300      	str	r3, [sp, #0]
 800043e:	2301      	movs	r3, #1
 8000440:	2206      	movs	r2, #6
 8000442:	2104      	movs	r1, #4
 8000444:	2030      	movs	r0, #48	@ 0x30
 8000446:	f003 f933 	bl	80036b0 <OLED_ShowNum>
	OLED_ShowNum(48, 7, 77, 2, 12, 1); //反相显示2位6X8数字“77”
 800044a:	2301      	movs	r3, #1
 800044c:	9301      	str	r3, [sp, #4]
 800044e:	230c      	movs	r3, #12
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	2302      	movs	r3, #2
 8000454:	224d      	movs	r2, #77	@ 0x4d
 8000456:	2107      	movs	r1, #7
 8000458:	2030      	movs	r0, #48	@ 0x30
 800045a:	f003 f929 	bl	80036b0 <OLED_ShowNum>
	OLED_DrawBMP(90, 0, 122, 4, BMP1, 0); //正相显示图片BMP1
 800045e:	2300      	movs	r3, #0
 8000460:	9301      	str	r3, [sp, #4]
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <main+0xf0>)
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2304      	movs	r3, #4
 8000468:	227a      	movs	r2, #122	@ 0x7a
 800046a:	2100      	movs	r1, #0
 800046c:	205a      	movs	r0, #90	@ 0x5a
 800046e:	f003 fa03 	bl	8003878 <OLED_DrawBMP>
	OLED_DrawBMP(90, 4, 122, 8, BMP1, 1); //反相显示图片BMP1
 8000472:	2301      	movs	r3, #1
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <main+0xf0>)
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	2308      	movs	r3, #8
 800047c:	227a      	movs	r2, #122	@ 0x7a
 800047e:	2104      	movs	r1, #4
 8000480:	205a      	movs	r0, #90	@ 0x5a
 8000482:	f003 f9f9 	bl	8003878 <OLED_DrawBMP>
	/* USER CODE BEGIN 3 */
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000486:	bf00      	nop
 8000488:	e7fd      	b.n	8000486 <main+0xe2>
 800048a:	bf00      	nop
 800048c:	080039a0 	.word	0x080039a0
 8000490:	080039ac 	.word	0x080039ac
 8000494:	20000024 	.word	0x20000024

08000498 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b090      	sub	sp, #64	@ 0x40
 800049c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800049e:	f107 0318 	add.w	r3, r7, #24
 80004a2:	2228      	movs	r2, #40	@ 0x28
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f003 fa42 	bl	8003930 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ba:	2302      	movs	r3, #2
 80004bc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004be:	2301      	movs	r3, #1
 80004c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c2:	2310      	movs	r3, #16
 80004c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c6:	2302      	movs	r3, #2
 80004c8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004ca:	2300      	movs	r3, #0
 80004cc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004ce:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 80004d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 fd83 	bl	8001fe4 <HAL_RCC_OscConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0x50>
		Error_Handler();
 80004e4:	f000 f819 	bl	800051a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004e8:	230f      	movs	r3, #15
 80004ea:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ec:	2302      	movs	r3, #2
 80004ee:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2101      	movs	r1, #1
 8000502:	4618      	mov	r0, r3
 8000504:	f001 fff0 	bl	80024e8 <HAL_RCC_ClockConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x7a>
		Error_Handler();
 800050e:	f000 f804 	bl	800051a <Error_Handler>
	}
}
 8000512:	bf00      	nop
 8000514:	3740      	adds	r7, #64	@ 0x40
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051e:	b672      	cpsid	i
}
 8000520:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000522:	bf00      	nop
 8000524:	e7fd      	b.n	8000522 <Error_Handler+0x8>
	...

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052e:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <HAL_MspInit+0x5c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a14      	ldr	r2, [pc, #80]	@ (8000584 <HAL_MspInit+0x5c>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <HAL_MspInit+0x5c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <HAL_MspInit+0x5c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	4a0e      	ldr	r2, [pc, #56]	@ (8000584 <HAL_MspInit+0x5c>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000550:	61d3      	str	r3, [r2, #28]
 8000552:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <HAL_MspInit+0x5c>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800055e:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <HAL_MspInit+0x60>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	4a04      	ldr	r2, [pc, #16]	@ (8000588 <HAL_MspInit+0x60>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000
 8000588:	40010000 	.word	0x40010000

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <NMI_Handler+0x4>

08000594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <HardFault_Handler+0x4>

0800059c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <MemManage_Handler+0x4>

080005a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <BusFault_Handler+0x4>

080005ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <UsageFault_Handler+0x4>

080005b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005dc:	f000 f9ba 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80005e8:	4802      	ldr	r0, [pc, #8]	@ (80005f4 <DMA1_Channel6_IRQHandler+0x10>)
 80005ea:	f000 fc7f 	bl	8000eec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200001a0 	.word	0x200001a0

080005f8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80005fc:	4802      	ldr	r0, [pc, #8]	@ (8000608 <DMA1_Channel7_IRQHandler+0x10>)
 80005fe:	f000 fc75 	bl	8000eec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200001e4 	.word	0x200001e4

0800060c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8000610:	4802      	ldr	r0, [pc, #8]	@ (800061c <USART2_IRQHandler+0x10>)
 8000612:	f002 fa6f 	bl	8002af4 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000015c 	.word	0x2000015c

08000620 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <MX_TIM6_Init+0x64>)
 800063c:	4a15      	ldr	r2, [pc, #84]	@ (8000694 <MX_TIM6_Init+0x68>)
 800063e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48;
 8000640:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <MX_TIM6_Init+0x64>)
 8000642:	2230      	movs	r2, #48	@ 0x30
 8000644:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000646:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <MX_TIM6_Init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800064c:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <MX_TIM6_Init+0x64>)
 800064e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000652:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000654:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_TIM6_Init+0x64>)
 8000656:	2280      	movs	r2, #128	@ 0x80
 8000658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800065a:	480d      	ldr	r0, [pc, #52]	@ (8000690 <MX_TIM6_Init+0x64>)
 800065c:	f002 f8d2 	bl	8002804 <HAL_TIM_Base_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000666:	f7ff ff58 	bl	800051a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000672:	463b      	mov	r3, r7
 8000674:	4619      	mov	r1, r3
 8000676:	4806      	ldr	r0, [pc, #24]	@ (8000690 <MX_TIM6_Init+0x64>)
 8000678:	f002 f98e 	bl	8002998 <HAL_TIMEx_MasterConfigSynchronization>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000682:	f7ff ff4a 	bl	800051a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000114 	.word	0x20000114
 8000694:	40001000 	.word	0x40001000

08000698 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a09      	ldr	r2, [pc, #36]	@ (80006cc <HAL_TIM_Base_MspInit+0x34>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d10b      	bne.n	80006c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <HAL_TIM_Base_MspInit+0x38>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a08      	ldr	r2, [pc, #32]	@ (80006d0 <HAL_TIM_Base_MspInit+0x38>)
 80006b0:	f043 0310 	orr.w	r3, r3, #16
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <HAL_TIM_Base_MspInit+0x38>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 0310 	and.w	r3, r3, #16
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	40001000 	.word	0x40001000
 80006d0:	40021000 	.word	0x40021000

080006d4 <MX_USART2_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */
void MX_USART2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_USART2_Init+0x50>)
 80006da:	4a13      	ldr	r2, [pc, #76]	@ (8000728 <MX_USART2_Init+0x54>)
 80006dc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_USART2_Init+0x50>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_USART2_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <MX_USART2_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_USART2_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <MX_USART2_Init+0x50>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_USART2_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_USART2_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_USART2_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <MX_USART2_Init+0x50>)
 8000712:	f002 f9ad 	bl	8002a70 <HAL_USART_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 800071c:	f7ff fefd 	bl	800051a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000015c 	.word	0x2000015c
 8000728:	40004400 	.word	0x40004400

0800072c <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  if(usartHandle->Instance==USART2)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a46      	ldr	r2, [pc, #280]	@ (8000860 <HAL_USART_MspInit+0x134>)
 8000748:	4293      	cmp	r3, r2
 800074a:	f040 8084 	bne.w	8000856 <HAL_USART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800074e:	4b45      	ldr	r3, [pc, #276]	@ (8000864 <HAL_USART_MspInit+0x138>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a44      	ldr	r2, [pc, #272]	@ (8000864 <HAL_USART_MspInit+0x138>)
 8000754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b42      	ldr	r3, [pc, #264]	@ (8000864 <HAL_USART_MspInit+0x138>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b3f      	ldr	r3, [pc, #252]	@ (8000864 <HAL_USART_MspInit+0x138>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4a3e      	ldr	r2, [pc, #248]	@ (8000864 <HAL_USART_MspInit+0x138>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	4b3c      	ldr	r3, [pc, #240]	@ (8000864 <HAL_USART_MspInit+0x138>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 800077e:	2314      	movs	r3, #20
 8000780:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	4835      	ldr	r0, [pc, #212]	@ (8000868 <HAL_USART_MspInit+0x13c>)
 8000792:	f000 fde7 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000796:	2308      	movs	r3, #8
 8000798:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	4619      	mov	r1, r3
 80007a8:	482f      	ldr	r0, [pc, #188]	@ (8000868 <HAL_USART_MspInit+0x13c>)
 80007aa:	f000 fddb 	bl	8001364 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80007ae:	4b2f      	ldr	r3, [pc, #188]	@ (800086c <HAL_USART_MspInit+0x140>)
 80007b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000870 <HAL_USART_MspInit+0x144>)
 80007b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007b4:	4b2d      	ldr	r3, [pc, #180]	@ (800086c <HAL_USART_MspInit+0x140>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ba:	4b2c      	ldr	r3, [pc, #176]	@ (800086c <HAL_USART_MspInit+0x140>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007c0:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <HAL_USART_MspInit+0x140>)
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007c6:	4b29      	ldr	r3, [pc, #164]	@ (800086c <HAL_USART_MspInit+0x140>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007cc:	4b27      	ldr	r3, [pc, #156]	@ (800086c <HAL_USART_MspInit+0x140>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80007d2:	4b26      	ldr	r3, [pc, #152]	@ (800086c <HAL_USART_MspInit+0x140>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007d8:	4b24      	ldr	r3, [pc, #144]	@ (800086c <HAL_USART_MspInit+0x140>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007de:	4823      	ldr	r0, [pc, #140]	@ (800086c <HAL_USART_MspInit+0x140>)
 80007e0:	f000 fa06 	bl	8000bf0 <HAL_DMA_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <HAL_USART_MspInit+0xc2>
    {
      Error_Handler();
 80007ea:	f7ff fe96 	bl	800051a <Error_Handler>
    }

    __HAL_LINKDMA(usartHandle,hdmarx,hdma_usart2_rx);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a1e      	ldr	r2, [pc, #120]	@ (800086c <HAL_USART_MspInit+0x140>)
 80007f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80007f4:	4a1d      	ldr	r2, [pc, #116]	@ (800086c <HAL_USART_MspInit+0x140>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80007fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <HAL_USART_MspInit+0x148>)
 80007fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000878 <HAL_USART_MspInit+0x14c>)
 80007fe:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000800:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <HAL_USART_MspInit+0x148>)
 8000802:	2210      	movs	r2, #16
 8000804:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000806:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <HAL_USART_MspInit+0x148>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800080c:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <HAL_USART_MspInit+0x148>)
 800080e:	2280      	movs	r2, #128	@ 0x80
 8000810:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000812:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <HAL_USART_MspInit+0x148>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000818:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <HAL_USART_MspInit+0x148>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800081e:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <HAL_USART_MspInit+0x148>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000824:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <HAL_USART_MspInit+0x148>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800082a:	4812      	ldr	r0, [pc, #72]	@ (8000874 <HAL_USART_MspInit+0x148>)
 800082c:	f000 f9e0 	bl	8000bf0 <HAL_DMA_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_USART_MspInit+0x10e>
    {
      Error_Handler();
 8000836:	f7ff fe70 	bl	800051a <Error_Handler>
    }

    __HAL_LINKDMA(usartHandle,hdmatx,hdma_usart2_tx);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <HAL_USART_MspInit+0x148>)
 800083e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000840:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <HAL_USART_MspInit+0x148>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2026      	movs	r0, #38	@ 0x26
 800084c:	f000 f999 	bl	8000b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000850:	2026      	movs	r0, #38	@ 0x26
 8000852:	f000 f9b2 	bl	8000bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40004400 	.word	0x40004400
 8000864:	40021000 	.word	0x40021000
 8000868:	40010800 	.word	0x40010800
 800086c:	200001a0 	.word	0x200001a0
 8000870:	4002006c 	.word	0x4002006c
 8000874:	200001e4 	.word	0x200001e4
 8000878:	40020080 	.word	0x40020080

0800087c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800087c:	f7ff fed0 	bl	8000620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000882:	490c      	ldr	r1, [pc, #48]	@ (80008b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000884:	4a0c      	ldr	r2, [pc, #48]	@ (80008b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a09      	ldr	r2, [pc, #36]	@ (80008bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000898:	4c09      	ldr	r4, [pc, #36]	@ (80008c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a6:	f003 f84b 	bl	8003940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008aa:	f7ff fd7b 	bl	80003a4 <main>
  bx lr
 80008ae:	4770      	bx	lr
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80008b8:	08004258 	.word	0x08004258
  ldr r2, =_sbss
 80008bc:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80008c0:	2000022c 	.word	0x2000022c

080008c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_2_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <HAL_Init+0x28>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <HAL_Init+0x28>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 f947 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	200f      	movs	r0, #15
 80008e0:	f000 f808 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff fe20 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_InitTick+0x54>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_InitTick+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f95f 	bl	8000bd6 <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e00e      	b.n	8000940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d80a      	bhi.n	800093e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f000 f927 	bl	8000b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000934:	4a06      	ldr	r2, [pc, #24]	@ (8000950 <HAL_InitTick+0x5c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	20000008 	.word	0x20000008
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <HAL_IncTick+0x1c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <HAL_IncTick+0x20>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a03      	ldr	r2, [pc, #12]	@ (8000974 <HAL_IncTick+0x20>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	20000008 	.word	0x20000008
 8000974:	20000228 	.word	0x20000228

08000978 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b02      	ldr	r3, [pc, #8]	@ (8000988 <HAL_GetTick+0x10>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000228 	.word	0x20000228

0800098c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000994:	f7ff fff0 	bl	8000978 <HAL_GetTick>
 8000998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a4:	d005      	beq.n	80009b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <HAL_Delay+0x44>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b2:	bf00      	nop
 80009b4:	f7ff ffe0 	bl	8000978 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d8f7      	bhi.n	80009b4 <HAL_Delay+0x28>
  {
  }
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4906      	ldr	r1, [pc, #24]	@ (8000a6c <__NVIC_EnableIRQ+0x34>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	@ (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	@ (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	@ 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	@ 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b38:	d301      	bcc.n	8000b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00f      	b.n	8000b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <SysTick_Config+0x40>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b46:	210f      	movs	r1, #15
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f7ff ff90 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <SysTick_Config+0x40>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <SysTick_Config+0x40>)
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff2d 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff42 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff90 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5f 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff35 	bl	8000a38 <__NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffa2 	bl	8000b28 <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d101      	bne.n	8000c06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e059      	b.n	8000cba <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc4 <HAL_DMA_Init+0xd4>)
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d80f      	bhi.n	8000c32 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc8 <HAL_DMA_Init+0xd8>)
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8000ccc <HAL_DMA_Init+0xdc>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	009a      	lsls	r2, r3, #2
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a28      	ldr	r2, [pc, #160]	@ (8000cd0 <HAL_DMA_Init+0xe0>)
 8000c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c30:	e00e      	b.n	8000c50 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <HAL_DMA_Init+0xe4>)
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a23      	ldr	r2, [pc, #140]	@ (8000ccc <HAL_DMA_Init+0xdc>)
 8000c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	009a      	lsls	r2, r3, #2
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a22      	ldr	r2, [pc, #136]	@ (8000cd8 <HAL_DMA_Init+0xe8>)
 8000c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2202      	movs	r2, #2
 8000c54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000c66:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000c6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	40020407 	.word	0x40020407
 8000cc8:	bffdfff8 	.word	0xbffdfff8
 8000ccc:	cccccccd 	.word	0xcccccccd
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	bffdfbf8 	.word	0xbffdfbf8
 8000cd8:	40020400 	.word	0x40020400

08000cdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d005      	beq.n	8000d00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	e0d6      	b.n	8000eae <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 020e 	bic.w	r2, r2, #14
 8000d0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 0201 	bic.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b64      	ldr	r3, [pc, #400]	@ (8000eb8 <HAL_DMA_Abort_IT+0x1dc>)
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d958      	bls.n	8000dde <HAL_DMA_Abort_IT+0x102>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a62      	ldr	r2, [pc, #392]	@ (8000ebc <HAL_DMA_Abort_IT+0x1e0>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d04f      	beq.n	8000dd6 <HAL_DMA_Abort_IT+0xfa>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a61      	ldr	r2, [pc, #388]	@ (8000ec0 <HAL_DMA_Abort_IT+0x1e4>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d048      	beq.n	8000dd2 <HAL_DMA_Abort_IT+0xf6>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a5f      	ldr	r2, [pc, #380]	@ (8000ec4 <HAL_DMA_Abort_IT+0x1e8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d040      	beq.n	8000dcc <HAL_DMA_Abort_IT+0xf0>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a5e      	ldr	r2, [pc, #376]	@ (8000ec8 <HAL_DMA_Abort_IT+0x1ec>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d038      	beq.n	8000dc6 <HAL_DMA_Abort_IT+0xea>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a5c      	ldr	r2, [pc, #368]	@ (8000ecc <HAL_DMA_Abort_IT+0x1f0>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d030      	beq.n	8000dc0 <HAL_DMA_Abort_IT+0xe4>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a5b      	ldr	r2, [pc, #364]	@ (8000ed0 <HAL_DMA_Abort_IT+0x1f4>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d028      	beq.n	8000dba <HAL_DMA_Abort_IT+0xde>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a52      	ldr	r2, [pc, #328]	@ (8000eb8 <HAL_DMA_Abort_IT+0x1dc>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d020      	beq.n	8000db4 <HAL_DMA_Abort_IT+0xd8>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a57      	ldr	r2, [pc, #348]	@ (8000ed4 <HAL_DMA_Abort_IT+0x1f8>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d019      	beq.n	8000db0 <HAL_DMA_Abort_IT+0xd4>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a55      	ldr	r2, [pc, #340]	@ (8000ed8 <HAL_DMA_Abort_IT+0x1fc>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d012      	beq.n	8000dac <HAL_DMA_Abort_IT+0xd0>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a54      	ldr	r2, [pc, #336]	@ (8000edc <HAL_DMA_Abort_IT+0x200>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d00a      	beq.n	8000da6 <HAL_DMA_Abort_IT+0xca>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a52      	ldr	r2, [pc, #328]	@ (8000ee0 <HAL_DMA_Abort_IT+0x204>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d102      	bne.n	8000da0 <HAL_DMA_Abort_IT+0xc4>
 8000d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9e:	e01b      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xfc>
 8000da0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000da4:	e018      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xfc>
 8000da6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000daa:	e015      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xfc>
 8000dac:	2310      	movs	r3, #16
 8000dae:	e013      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xfc>
 8000db0:	2301      	movs	r3, #1
 8000db2:	e011      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xfc>
 8000db4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000db8:	e00e      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xfc>
 8000dba:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000dbe:	e00b      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xfc>
 8000dc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc4:	e008      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xfc>
 8000dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dca:	e005      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xfc>
 8000dcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dd0:	e002      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xfc>
 8000dd2:	2310      	movs	r3, #16
 8000dd4:	e000      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xfc>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	4a42      	ldr	r2, [pc, #264]	@ (8000ee4 <HAL_DMA_Abort_IT+0x208>)
 8000dda:	6053      	str	r3, [r2, #4]
 8000ddc:	e057      	b.n	8000e8e <HAL_DMA_Abort_IT+0x1b2>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a36      	ldr	r2, [pc, #216]	@ (8000ebc <HAL_DMA_Abort_IT+0x1e0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d04f      	beq.n	8000e88 <HAL_DMA_Abort_IT+0x1ac>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a34      	ldr	r2, [pc, #208]	@ (8000ec0 <HAL_DMA_Abort_IT+0x1e4>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d048      	beq.n	8000e84 <HAL_DMA_Abort_IT+0x1a8>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a33      	ldr	r2, [pc, #204]	@ (8000ec4 <HAL_DMA_Abort_IT+0x1e8>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d040      	beq.n	8000e7e <HAL_DMA_Abort_IT+0x1a2>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a31      	ldr	r2, [pc, #196]	@ (8000ec8 <HAL_DMA_Abort_IT+0x1ec>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d038      	beq.n	8000e78 <HAL_DMA_Abort_IT+0x19c>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a30      	ldr	r2, [pc, #192]	@ (8000ecc <HAL_DMA_Abort_IT+0x1f0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d030      	beq.n	8000e72 <HAL_DMA_Abort_IT+0x196>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a2e      	ldr	r2, [pc, #184]	@ (8000ed0 <HAL_DMA_Abort_IT+0x1f4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d028      	beq.n	8000e6c <HAL_DMA_Abort_IT+0x190>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a26      	ldr	r2, [pc, #152]	@ (8000eb8 <HAL_DMA_Abort_IT+0x1dc>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d020      	beq.n	8000e66 <HAL_DMA_Abort_IT+0x18a>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed4 <HAL_DMA_Abort_IT+0x1f8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d019      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x186>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a29      	ldr	r2, [pc, #164]	@ (8000ed8 <HAL_DMA_Abort_IT+0x1fc>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d012      	beq.n	8000e5e <HAL_DMA_Abort_IT+0x182>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a27      	ldr	r2, [pc, #156]	@ (8000edc <HAL_DMA_Abort_IT+0x200>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d00a      	beq.n	8000e58 <HAL_DMA_Abort_IT+0x17c>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a26      	ldr	r2, [pc, #152]	@ (8000ee0 <HAL_DMA_Abort_IT+0x204>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d102      	bne.n	8000e52 <HAL_DMA_Abort_IT+0x176>
 8000e4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e50:	e01b      	b.n	8000e8a <HAL_DMA_Abort_IT+0x1ae>
 8000e52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e56:	e018      	b.n	8000e8a <HAL_DMA_Abort_IT+0x1ae>
 8000e58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e5c:	e015      	b.n	8000e8a <HAL_DMA_Abort_IT+0x1ae>
 8000e5e:	2310      	movs	r3, #16
 8000e60:	e013      	b.n	8000e8a <HAL_DMA_Abort_IT+0x1ae>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e011      	b.n	8000e8a <HAL_DMA_Abort_IT+0x1ae>
 8000e66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e6a:	e00e      	b.n	8000e8a <HAL_DMA_Abort_IT+0x1ae>
 8000e6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e70:	e00b      	b.n	8000e8a <HAL_DMA_Abort_IT+0x1ae>
 8000e72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e76:	e008      	b.n	8000e8a <HAL_DMA_Abort_IT+0x1ae>
 8000e78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e7c:	e005      	b.n	8000e8a <HAL_DMA_Abort_IT+0x1ae>
 8000e7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e82:	e002      	b.n	8000e8a <HAL_DMA_Abort_IT+0x1ae>
 8000e84:	2310      	movs	r3, #16
 8000e86:	e000      	b.n	8000e8a <HAL_DMA_Abort_IT+0x1ae>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ee8 <HAL_DMA_Abort_IT+0x20c>)
 8000e8c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	4798      	blx	r3
    } 
  }
  return status;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40020080 	.word	0x40020080
 8000ebc:	40020008 	.word	0x40020008
 8000ec0:	4002001c 	.word	0x4002001c
 8000ec4:	40020030 	.word	0x40020030
 8000ec8:	40020044 	.word	0x40020044
 8000ecc:	40020058 	.word	0x40020058
 8000ed0:	4002006c 	.word	0x4002006c
 8000ed4:	40020408 	.word	0x40020408
 8000ed8:	4002041c 	.word	0x4002041c
 8000edc:	40020430 	.word	0x40020430
 8000ee0:	40020444 	.word	0x40020444
 8000ee4:	40020400 	.word	0x40020400
 8000ee8:	40020000 	.word	0x40020000

08000eec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f08:	2204      	movs	r2, #4
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80f1 	beq.w	80010f8 <HAL_DMA_IRQHandler+0x20c>
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 80eb 	beq.w	80010f8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0320 	and.w	r3, r3, #32
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d107      	bne.n	8000f40 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0204 	bic.w	r2, r2, #4
 8000f3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b5f      	ldr	r3, [pc, #380]	@ (80010c4 <HAL_DMA_IRQHandler+0x1d8>)
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d958      	bls.n	8000ffe <HAL_DMA_IRQHandler+0x112>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a5d      	ldr	r2, [pc, #372]	@ (80010c8 <HAL_DMA_IRQHandler+0x1dc>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d04f      	beq.n	8000ff6 <HAL_DMA_IRQHandler+0x10a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a5c      	ldr	r2, [pc, #368]	@ (80010cc <HAL_DMA_IRQHandler+0x1e0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d048      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x106>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a5a      	ldr	r2, [pc, #360]	@ (80010d0 <HAL_DMA_IRQHandler+0x1e4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d040      	beq.n	8000fec <HAL_DMA_IRQHandler+0x100>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a59      	ldr	r2, [pc, #356]	@ (80010d4 <HAL_DMA_IRQHandler+0x1e8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d038      	beq.n	8000fe6 <HAL_DMA_IRQHandler+0xfa>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a57      	ldr	r2, [pc, #348]	@ (80010d8 <HAL_DMA_IRQHandler+0x1ec>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d030      	beq.n	8000fe0 <HAL_DMA_IRQHandler+0xf4>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a56      	ldr	r2, [pc, #344]	@ (80010dc <HAL_DMA_IRQHandler+0x1f0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d028      	beq.n	8000fda <HAL_DMA_IRQHandler+0xee>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	@ (80010c4 <HAL_DMA_IRQHandler+0x1d8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d020      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0xe8>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a52      	ldr	r2, [pc, #328]	@ (80010e0 <HAL_DMA_IRQHandler+0x1f4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d019      	beq.n	8000fd0 <HAL_DMA_IRQHandler+0xe4>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a50      	ldr	r2, [pc, #320]	@ (80010e4 <HAL_DMA_IRQHandler+0x1f8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d012      	beq.n	8000fcc <HAL_DMA_IRQHandler+0xe0>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a4f      	ldr	r2, [pc, #316]	@ (80010e8 <HAL_DMA_IRQHandler+0x1fc>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d00a      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0xda>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a4d      	ldr	r2, [pc, #308]	@ (80010ec <HAL_DMA_IRQHandler+0x200>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d102      	bne.n	8000fc0 <HAL_DMA_IRQHandler+0xd4>
 8000fba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fbe:	e01b      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x10c>
 8000fc0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000fc4:	e018      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x10c>
 8000fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fca:	e015      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x10c>
 8000fcc:	2340      	movs	r3, #64	@ 0x40
 8000fce:	e013      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x10c>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	e011      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x10c>
 8000fd4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000fd8:	e00e      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x10c>
 8000fda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fde:	e00b      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x10c>
 8000fe0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000fe4:	e008      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x10c>
 8000fe6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fea:	e005      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x10c>
 8000fec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff0:	e002      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x10c>
 8000ff2:	2340      	movs	r3, #64	@ 0x40
 8000ff4:	e000      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x10c>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	4a3d      	ldr	r2, [pc, #244]	@ (80010f0 <HAL_DMA_IRQHandler+0x204>)
 8000ffa:	6053      	str	r3, [r2, #4]
 8000ffc:	e057      	b.n	80010ae <HAL_DMA_IRQHandler+0x1c2>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a31      	ldr	r2, [pc, #196]	@ (80010c8 <HAL_DMA_IRQHandler+0x1dc>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d04f      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x1bc>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a2f      	ldr	r2, [pc, #188]	@ (80010cc <HAL_DMA_IRQHandler+0x1e0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d048      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x1b8>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a2e      	ldr	r2, [pc, #184]	@ (80010d0 <HAL_DMA_IRQHandler+0x1e4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d040      	beq.n	800109e <HAL_DMA_IRQHandler+0x1b2>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a2c      	ldr	r2, [pc, #176]	@ (80010d4 <HAL_DMA_IRQHandler+0x1e8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d038      	beq.n	8001098 <HAL_DMA_IRQHandler+0x1ac>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a2b      	ldr	r2, [pc, #172]	@ (80010d8 <HAL_DMA_IRQHandler+0x1ec>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d030      	beq.n	8001092 <HAL_DMA_IRQHandler+0x1a6>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a29      	ldr	r2, [pc, #164]	@ (80010dc <HAL_DMA_IRQHandler+0x1f0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d028      	beq.n	800108c <HAL_DMA_IRQHandler+0x1a0>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a21      	ldr	r2, [pc, #132]	@ (80010c4 <HAL_DMA_IRQHandler+0x1d8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d020      	beq.n	8001086 <HAL_DMA_IRQHandler+0x19a>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a25      	ldr	r2, [pc, #148]	@ (80010e0 <HAL_DMA_IRQHandler+0x1f4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d019      	beq.n	8001082 <HAL_DMA_IRQHandler+0x196>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a24      	ldr	r2, [pc, #144]	@ (80010e4 <HAL_DMA_IRQHandler+0x1f8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d012      	beq.n	800107e <HAL_DMA_IRQHandler+0x192>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a22      	ldr	r2, [pc, #136]	@ (80010e8 <HAL_DMA_IRQHandler+0x1fc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00a      	beq.n	8001078 <HAL_DMA_IRQHandler+0x18c>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a21      	ldr	r2, [pc, #132]	@ (80010ec <HAL_DMA_IRQHandler+0x200>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d102      	bne.n	8001072 <HAL_DMA_IRQHandler+0x186>
 800106c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001070:	e01b      	b.n	80010aa <HAL_DMA_IRQHandler+0x1be>
 8001072:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001076:	e018      	b.n	80010aa <HAL_DMA_IRQHandler+0x1be>
 8001078:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800107c:	e015      	b.n	80010aa <HAL_DMA_IRQHandler+0x1be>
 800107e:	2340      	movs	r3, #64	@ 0x40
 8001080:	e013      	b.n	80010aa <HAL_DMA_IRQHandler+0x1be>
 8001082:	2304      	movs	r3, #4
 8001084:	e011      	b.n	80010aa <HAL_DMA_IRQHandler+0x1be>
 8001086:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800108a:	e00e      	b.n	80010aa <HAL_DMA_IRQHandler+0x1be>
 800108c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001090:	e00b      	b.n	80010aa <HAL_DMA_IRQHandler+0x1be>
 8001092:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001096:	e008      	b.n	80010aa <HAL_DMA_IRQHandler+0x1be>
 8001098:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800109c:	e005      	b.n	80010aa <HAL_DMA_IRQHandler+0x1be>
 800109e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010a2:	e002      	b.n	80010aa <HAL_DMA_IRQHandler+0x1be>
 80010a4:	2340      	movs	r3, #64	@ 0x40
 80010a6:	e000      	b.n	80010aa <HAL_DMA_IRQHandler+0x1be>
 80010a8:	2304      	movs	r3, #4
 80010aa:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <HAL_DMA_IRQHandler+0x208>)
 80010ac:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8136 	beq.w	8001324 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010c0:	e130      	b.n	8001324 <HAL_DMA_IRQHandler+0x438>
 80010c2:	bf00      	nop
 80010c4:	40020080 	.word	0x40020080
 80010c8:	40020008 	.word	0x40020008
 80010cc:	4002001c 	.word	0x4002001c
 80010d0:	40020030 	.word	0x40020030
 80010d4:	40020044 	.word	0x40020044
 80010d8:	40020058 	.word	0x40020058
 80010dc:	4002006c 	.word	0x4002006c
 80010e0:	40020408 	.word	0x40020408
 80010e4:	4002041c 	.word	0x4002041c
 80010e8:	40020430 	.word	0x40020430
 80010ec:	40020444 	.word	0x40020444
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fc:	2202      	movs	r2, #2
 80010fe:	409a      	lsls	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4013      	ands	r3, r2
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80dd 	beq.w	80012c4 <HAL_DMA_IRQHandler+0x3d8>
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80d7 	beq.w	80012c4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10b      	bne.n	800113c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 020a 	bic.w	r2, r2, #10
 8001132:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b7b      	ldr	r3, [pc, #492]	@ (8001330 <HAL_DMA_IRQHandler+0x444>)
 8001144:	429a      	cmp	r2, r3
 8001146:	d958      	bls.n	80011fa <HAL_DMA_IRQHandler+0x30e>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a79      	ldr	r2, [pc, #484]	@ (8001334 <HAL_DMA_IRQHandler+0x448>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d04f      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x306>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a78      	ldr	r2, [pc, #480]	@ (8001338 <HAL_DMA_IRQHandler+0x44c>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d048      	beq.n	80011ee <HAL_DMA_IRQHandler+0x302>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a76      	ldr	r2, [pc, #472]	@ (800133c <HAL_DMA_IRQHandler+0x450>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d040      	beq.n	80011e8 <HAL_DMA_IRQHandler+0x2fc>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a75      	ldr	r2, [pc, #468]	@ (8001340 <HAL_DMA_IRQHandler+0x454>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d038      	beq.n	80011e2 <HAL_DMA_IRQHandler+0x2f6>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a73      	ldr	r2, [pc, #460]	@ (8001344 <HAL_DMA_IRQHandler+0x458>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d030      	beq.n	80011dc <HAL_DMA_IRQHandler+0x2f0>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a72      	ldr	r2, [pc, #456]	@ (8001348 <HAL_DMA_IRQHandler+0x45c>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d028      	beq.n	80011d6 <HAL_DMA_IRQHandler+0x2ea>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a69      	ldr	r2, [pc, #420]	@ (8001330 <HAL_DMA_IRQHandler+0x444>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d020      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x2e4>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a6e      	ldr	r2, [pc, #440]	@ (800134c <HAL_DMA_IRQHandler+0x460>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d019      	beq.n	80011cc <HAL_DMA_IRQHandler+0x2e0>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a6c      	ldr	r2, [pc, #432]	@ (8001350 <HAL_DMA_IRQHandler+0x464>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d012      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x2dc>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6b      	ldr	r2, [pc, #428]	@ (8001354 <HAL_DMA_IRQHandler+0x468>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d00a      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x2d6>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a69      	ldr	r2, [pc, #420]	@ (8001358 <HAL_DMA_IRQHandler+0x46c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d102      	bne.n	80011bc <HAL_DMA_IRQHandler+0x2d0>
 80011b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ba:	e01b      	b.n	80011f4 <HAL_DMA_IRQHandler+0x308>
 80011bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011c0:	e018      	b.n	80011f4 <HAL_DMA_IRQHandler+0x308>
 80011c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011c6:	e015      	b.n	80011f4 <HAL_DMA_IRQHandler+0x308>
 80011c8:	2320      	movs	r3, #32
 80011ca:	e013      	b.n	80011f4 <HAL_DMA_IRQHandler+0x308>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e011      	b.n	80011f4 <HAL_DMA_IRQHandler+0x308>
 80011d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011d4:	e00e      	b.n	80011f4 <HAL_DMA_IRQHandler+0x308>
 80011d6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011da:	e00b      	b.n	80011f4 <HAL_DMA_IRQHandler+0x308>
 80011dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011e0:	e008      	b.n	80011f4 <HAL_DMA_IRQHandler+0x308>
 80011e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e6:	e005      	b.n	80011f4 <HAL_DMA_IRQHandler+0x308>
 80011e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ec:	e002      	b.n	80011f4 <HAL_DMA_IRQHandler+0x308>
 80011ee:	2320      	movs	r3, #32
 80011f0:	e000      	b.n	80011f4 <HAL_DMA_IRQHandler+0x308>
 80011f2:	2302      	movs	r3, #2
 80011f4:	4a59      	ldr	r2, [pc, #356]	@ (800135c <HAL_DMA_IRQHandler+0x470>)
 80011f6:	6053      	str	r3, [r2, #4]
 80011f8:	e057      	b.n	80012aa <HAL_DMA_IRQHandler+0x3be>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a4d      	ldr	r2, [pc, #308]	@ (8001334 <HAL_DMA_IRQHandler+0x448>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d04f      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x3b8>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a4b      	ldr	r2, [pc, #300]	@ (8001338 <HAL_DMA_IRQHandler+0x44c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d048      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x3b4>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a4a      	ldr	r2, [pc, #296]	@ (800133c <HAL_DMA_IRQHandler+0x450>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d040      	beq.n	800129a <HAL_DMA_IRQHandler+0x3ae>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a48      	ldr	r2, [pc, #288]	@ (8001340 <HAL_DMA_IRQHandler+0x454>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d038      	beq.n	8001294 <HAL_DMA_IRQHandler+0x3a8>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a47      	ldr	r2, [pc, #284]	@ (8001344 <HAL_DMA_IRQHandler+0x458>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d030      	beq.n	800128e <HAL_DMA_IRQHandler+0x3a2>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a45      	ldr	r2, [pc, #276]	@ (8001348 <HAL_DMA_IRQHandler+0x45c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d028      	beq.n	8001288 <HAL_DMA_IRQHandler+0x39c>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a3d      	ldr	r2, [pc, #244]	@ (8001330 <HAL_DMA_IRQHandler+0x444>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d020      	beq.n	8001282 <HAL_DMA_IRQHandler+0x396>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a41      	ldr	r2, [pc, #260]	@ (800134c <HAL_DMA_IRQHandler+0x460>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_DMA_IRQHandler+0x392>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a40      	ldr	r2, [pc, #256]	@ (8001350 <HAL_DMA_IRQHandler+0x464>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d012      	beq.n	800127a <HAL_DMA_IRQHandler+0x38e>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a3e      	ldr	r2, [pc, #248]	@ (8001354 <HAL_DMA_IRQHandler+0x468>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00a      	beq.n	8001274 <HAL_DMA_IRQHandler+0x388>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a3d      	ldr	r2, [pc, #244]	@ (8001358 <HAL_DMA_IRQHandler+0x46c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d102      	bne.n	800126e <HAL_DMA_IRQHandler+0x382>
 8001268:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800126c:	e01b      	b.n	80012a6 <HAL_DMA_IRQHandler+0x3ba>
 800126e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001272:	e018      	b.n	80012a6 <HAL_DMA_IRQHandler+0x3ba>
 8001274:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001278:	e015      	b.n	80012a6 <HAL_DMA_IRQHandler+0x3ba>
 800127a:	2320      	movs	r3, #32
 800127c:	e013      	b.n	80012a6 <HAL_DMA_IRQHandler+0x3ba>
 800127e:	2302      	movs	r3, #2
 8001280:	e011      	b.n	80012a6 <HAL_DMA_IRQHandler+0x3ba>
 8001282:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001286:	e00e      	b.n	80012a6 <HAL_DMA_IRQHandler+0x3ba>
 8001288:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800128c:	e00b      	b.n	80012a6 <HAL_DMA_IRQHandler+0x3ba>
 800128e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001292:	e008      	b.n	80012a6 <HAL_DMA_IRQHandler+0x3ba>
 8001294:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001298:	e005      	b.n	80012a6 <HAL_DMA_IRQHandler+0x3ba>
 800129a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800129e:	e002      	b.n	80012a6 <HAL_DMA_IRQHandler+0x3ba>
 80012a0:	2320      	movs	r3, #32
 80012a2:	e000      	b.n	80012a6 <HAL_DMA_IRQHandler+0x3ba>
 80012a4:	2302      	movs	r3, #2
 80012a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001360 <HAL_DMA_IRQHandler+0x474>)
 80012a8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d034      	beq.n	8001324 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80012c2:	e02f      	b.n	8001324 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	2208      	movs	r2, #8
 80012ca:	409a      	lsls	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d028      	beq.n	8001326 <HAL_DMA_IRQHandler+0x43a>
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d023      	beq.n	8001326 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 020e 	bic.w	r2, r2, #14
 80012ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012f6:	2101      	movs	r1, #1
 80012f8:	fa01 f202 	lsl.w	r2, r1, r2
 80012fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	4798      	blx	r3
    }
  }
  return;
 8001324:	bf00      	nop
 8001326:	bf00      	nop
}
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40020080 	.word	0x40020080
 8001334:	40020008 	.word	0x40020008
 8001338:	4002001c 	.word	0x4002001c
 800133c:	40020030 	.word	0x40020030
 8001340:	40020044 	.word	0x40020044
 8001344:	40020058 	.word	0x40020058
 8001348:	4002006c 	.word	0x4002006c
 800134c:	40020408 	.word	0x40020408
 8001350:	4002041c 	.word	0x4002041c
 8001354:	40020430 	.word	0x40020430
 8001358:	40020444 	.word	0x40020444
 800135c:	40020400 	.word	0x40020400
 8001360:	40020000 	.word	0x40020000

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b08b      	sub	sp, #44	@ 0x2c
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e179      	b.n	800166c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001378:	2201      	movs	r2, #1
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 8168 	bne.w	8001666 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a96      	ldr	r2, [pc, #600]	@ (80015f4 <HAL_GPIO_Init+0x290>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d05e      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013a0:	4a94      	ldr	r2, [pc, #592]	@ (80015f4 <HAL_GPIO_Init+0x290>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d875      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013a6:	4a94      	ldr	r2, [pc, #592]	@ (80015f8 <HAL_GPIO_Init+0x294>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d058      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013ac:	4a92      	ldr	r2, [pc, #584]	@ (80015f8 <HAL_GPIO_Init+0x294>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d86f      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013b2:	4a92      	ldr	r2, [pc, #584]	@ (80015fc <HAL_GPIO_Init+0x298>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d052      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013b8:	4a90      	ldr	r2, [pc, #576]	@ (80015fc <HAL_GPIO_Init+0x298>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d869      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013be:	4a90      	ldr	r2, [pc, #576]	@ (8001600 <HAL_GPIO_Init+0x29c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d04c      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013c4:	4a8e      	ldr	r2, [pc, #568]	@ (8001600 <HAL_GPIO_Init+0x29c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d863      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013ca:	4a8e      	ldr	r2, [pc, #568]	@ (8001604 <HAL_GPIO_Init+0x2a0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d046      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013d0:	4a8c      	ldr	r2, [pc, #560]	@ (8001604 <HAL_GPIO_Init+0x2a0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d85d      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013d6:	2b12      	cmp	r3, #18
 80013d8:	d82a      	bhi.n	8001430 <HAL_GPIO_Init+0xcc>
 80013da:	2b12      	cmp	r3, #18
 80013dc:	d859      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013de:	a201      	add	r2, pc, #4	@ (adr r2, 80013e4 <HAL_GPIO_Init+0x80>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	0800145f 	.word	0x0800145f
 80013e8:	08001439 	.word	0x08001439
 80013ec:	0800144b 	.word	0x0800144b
 80013f0:	0800148d 	.word	0x0800148d
 80013f4:	08001493 	.word	0x08001493
 80013f8:	08001493 	.word	0x08001493
 80013fc:	08001493 	.word	0x08001493
 8001400:	08001493 	.word	0x08001493
 8001404:	08001493 	.word	0x08001493
 8001408:	08001493 	.word	0x08001493
 800140c:	08001493 	.word	0x08001493
 8001410:	08001493 	.word	0x08001493
 8001414:	08001493 	.word	0x08001493
 8001418:	08001493 	.word	0x08001493
 800141c:	08001493 	.word	0x08001493
 8001420:	08001493 	.word	0x08001493
 8001424:	08001493 	.word	0x08001493
 8001428:	08001441 	.word	0x08001441
 800142c:	08001455 	.word	0x08001455
 8001430:	4a75      	ldr	r2, [pc, #468]	@ (8001608 <HAL_GPIO_Init+0x2a4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001436:	e02c      	b.n	8001492 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e029      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	3304      	adds	r3, #4
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e024      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	3308      	adds	r3, #8
 8001450:	623b      	str	r3, [r7, #32]
          break;
 8001452:	e01f      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	330c      	adds	r3, #12
 800145a:	623b      	str	r3, [r7, #32]
          break;
 800145c:	e01a      	b.n	8001494 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001466:	2304      	movs	r3, #4
 8001468:	623b      	str	r3, [r7, #32]
          break;
 800146a:	e013      	b.n	8001494 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d105      	bne.n	8001480 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001474:	2308      	movs	r3, #8
 8001476:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	611a      	str	r2, [r3, #16]
          break;
 800147e:	e009      	b.n	8001494 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	615a      	str	r2, [r3, #20]
          break;
 800148a:	e003      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x130>
          break;
 8001492:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2bff      	cmp	r3, #255	@ 0xff
 8001498:	d801      	bhi.n	800149e <HAL_GPIO_Init+0x13a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	e001      	b.n	80014a2 <HAL_GPIO_Init+0x13e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3304      	adds	r3, #4
 80014a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2bff      	cmp	r3, #255	@ 0xff
 80014a8:	d802      	bhi.n	80014b0 <HAL_GPIO_Init+0x14c>
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0x152>
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b2:	3b08      	subs	r3, #8
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	210f      	movs	r1, #15
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	401a      	ands	r2, r3
 80014c8:	6a39      	ldr	r1, [r7, #32]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	431a      	orrs	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80c1 	beq.w	8001666 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014e4:	4b49      	ldr	r3, [pc, #292]	@ (800160c <HAL_GPIO_Init+0x2a8>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a48      	ldr	r2, [pc, #288]	@ (800160c <HAL_GPIO_Init+0x2a8>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b46      	ldr	r3, [pc, #280]	@ (800160c <HAL_GPIO_Init+0x2a8>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014fc:	4a44      	ldr	r2, [pc, #272]	@ (8001610 <HAL_GPIO_Init+0x2ac>)
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a3c      	ldr	r2, [pc, #240]	@ (8001614 <HAL_GPIO_Init+0x2b0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d01f      	beq.n	8001568 <HAL_GPIO_Init+0x204>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a3b      	ldr	r2, [pc, #236]	@ (8001618 <HAL_GPIO_Init+0x2b4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d019      	beq.n	8001564 <HAL_GPIO_Init+0x200>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3a      	ldr	r2, [pc, #232]	@ (800161c <HAL_GPIO_Init+0x2b8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d013      	beq.n	8001560 <HAL_GPIO_Init+0x1fc>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a39      	ldr	r2, [pc, #228]	@ (8001620 <HAL_GPIO_Init+0x2bc>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d00d      	beq.n	800155c <HAL_GPIO_Init+0x1f8>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a38      	ldr	r2, [pc, #224]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d007      	beq.n	8001558 <HAL_GPIO_Init+0x1f4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a37      	ldr	r2, [pc, #220]	@ (8001628 <HAL_GPIO_Init+0x2c4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d101      	bne.n	8001554 <HAL_GPIO_Init+0x1f0>
 8001550:	2305      	movs	r3, #5
 8001552:	e00a      	b.n	800156a <HAL_GPIO_Init+0x206>
 8001554:	2306      	movs	r3, #6
 8001556:	e008      	b.n	800156a <HAL_GPIO_Init+0x206>
 8001558:	2304      	movs	r3, #4
 800155a:	e006      	b.n	800156a <HAL_GPIO_Init+0x206>
 800155c:	2303      	movs	r3, #3
 800155e:	e004      	b.n	800156a <HAL_GPIO_Init+0x206>
 8001560:	2302      	movs	r3, #2
 8001562:	e002      	b.n	800156a <HAL_GPIO_Init+0x206>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_GPIO_Init+0x206>
 8001568:	2300      	movs	r3, #0
 800156a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800156c:	f002 0203 	and.w	r2, r2, #3
 8001570:	0092      	lsls	r2, r2, #2
 8001572:	4093      	lsls	r3, r2
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800157a:	4925      	ldr	r1, [pc, #148]	@ (8001610 <HAL_GPIO_Init+0x2ac>)
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	3302      	adds	r3, #2
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001594:	4b25      	ldr	r3, [pc, #148]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	4924      	ldr	r1, [pc, #144]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	608b      	str	r3, [r1, #8]
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015a2:	4b22      	ldr	r3, [pc, #136]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4920      	ldr	r1, [pc, #128]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015bc:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	491a      	ldr	r1, [pc, #104]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	60cb      	str	r3, [r1, #12]
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	4916      	ldr	r1, [pc, #88]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d025      	beq.n	8001630 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	4910      	ldr	r1, [pc, #64]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
 80015f0:	e025      	b.n	800163e <HAL_GPIO_Init+0x2da>
 80015f2:	bf00      	nop
 80015f4:	10320000 	.word	0x10320000
 80015f8:	10310000 	.word	0x10310000
 80015fc:	10220000 	.word	0x10220000
 8001600:	10210000 	.word	0x10210000
 8001604:	10120000 	.word	0x10120000
 8001608:	10110000 	.word	0x10110000
 800160c:	40021000 	.word	0x40021000
 8001610:	40010000 	.word	0x40010000
 8001614:	40010800 	.word	0x40010800
 8001618:	40010c00 	.word	0x40010c00
 800161c:	40011000 	.word	0x40011000
 8001620:	40011400 	.word	0x40011400
 8001624:	40011800 	.word	0x40011800
 8001628:	40011c00 	.word	0x40011c00
 800162c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001630:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <HAL_GPIO_Init+0x324>)
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	43db      	mvns	r3, r3
 8001638:	4913      	ldr	r1, [pc, #76]	@ (8001688 <HAL_GPIO_Init+0x324>)
 800163a:	4013      	ands	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800164a:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <HAL_GPIO_Init+0x324>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	490e      	ldr	r1, [pc, #56]	@ (8001688 <HAL_GPIO_Init+0x324>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	600b      	str	r3, [r1, #0]
 8001656:	e006      	b.n	8001666 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001658:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <HAL_GPIO_Init+0x324>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	43db      	mvns	r3, r3
 8001660:	4909      	ldr	r1, [pc, #36]	@ (8001688 <HAL_GPIO_Init+0x324>)
 8001662:	4013      	ands	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	3301      	adds	r3, #1
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001672:	fa22 f303 	lsr.w	r3, r2, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	f47f ae7e 	bne.w	8001378 <HAL_GPIO_Init+0x14>
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	372c      	adds	r7, #44	@ 0x2c
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	40010400 	.word	0x40010400

0800168c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e12b      	b.n	80018f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d106      	bne.n	80016b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7fe fe38 	bl	8000328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2224      	movs	r2, #36	@ 0x24
 80016bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016f0:	f001 f842 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 80016f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a81      	ldr	r2, [pc, #516]	@ (8001900 <HAL_I2C_Init+0x274>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d807      	bhi.n	8001710 <HAL_I2C_Init+0x84>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4a80      	ldr	r2, [pc, #512]	@ (8001904 <HAL_I2C_Init+0x278>)
 8001704:	4293      	cmp	r3, r2
 8001706:	bf94      	ite	ls
 8001708:	2301      	movls	r3, #1
 800170a:	2300      	movhi	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	e006      	b.n	800171e <HAL_I2C_Init+0x92>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4a7d      	ldr	r2, [pc, #500]	@ (8001908 <HAL_I2C_Init+0x27c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	bf94      	ite	ls
 8001718:	2301      	movls	r3, #1
 800171a:	2300      	movhi	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0e7      	b.n	80018f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4a78      	ldr	r2, [pc, #480]	@ (800190c <HAL_I2C_Init+0x280>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0c9b      	lsrs	r3, r3, #18
 8001730:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4a6a      	ldr	r2, [pc, #424]	@ (8001900 <HAL_I2C_Init+0x274>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d802      	bhi.n	8001760 <HAL_I2C_Init+0xd4>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	3301      	adds	r3, #1
 800175e:	e009      	b.n	8001774 <HAL_I2C_Init+0xe8>
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	4a69      	ldr	r2, [pc, #420]	@ (8001910 <HAL_I2C_Init+0x284>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	3301      	adds	r3, #1
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	430b      	orrs	r3, r1
 800177a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001786:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	495c      	ldr	r1, [pc, #368]	@ (8001900 <HAL_I2C_Init+0x274>)
 8001790:	428b      	cmp	r3, r1
 8001792:	d819      	bhi.n	80017c8 <HAL_I2C_Init+0x13c>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e59      	subs	r1, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a2:	1c59      	adds	r1, r3, #1
 80017a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017a8:	400b      	ands	r3, r1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00a      	beq.n	80017c4 <HAL_I2C_Init+0x138>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1e59      	subs	r1, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017bc:	3301      	adds	r3, #1
 80017be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c2:	e051      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 80017c4:	2304      	movs	r3, #4
 80017c6:	e04f      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d111      	bne.n	80017f4 <HAL_I2C_Init+0x168>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1e58      	subs	r0, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	440b      	add	r3, r1
 80017de:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	e012      	b.n	800181a <HAL_I2C_Init+0x18e>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e58      	subs	r0, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	0099      	lsls	r1, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_I2C_Init+0x196>
 800181e:	2301      	movs	r3, #1
 8001820:	e022      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10e      	bne.n	8001848 <HAL_I2C_Init+0x1bc>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1e58      	subs	r0, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6859      	ldr	r1, [r3, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	440b      	add	r3, r1
 8001838:	fbb0 f3f3 	udiv	r3, r0, r3
 800183c:	3301      	adds	r3, #1
 800183e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001846:	e00f      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	0099      	lsls	r1, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	6809      	ldr	r1, [r1, #0]
 800186c:	4313      	orrs	r3, r2
 800186e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69da      	ldr	r2, [r3, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001896:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6911      	ldr	r1, [r2, #16]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68d2      	ldr	r2, [r2, #12]
 80018a2:	4311      	orrs	r1, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2220      	movs	r2, #32
 80018e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	000186a0 	.word	0x000186a0
 8001904:	001e847f 	.word	0x001e847f
 8001908:	003d08ff 	.word	0x003d08ff
 800190c:	431bde83 	.word	0x431bde83
 8001910:	10624dd3 	.word	0x10624dd3

08001914 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af02      	add	r7, sp, #8
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4603      	mov	r3, r0
 8001924:	817b      	strh	r3, [r7, #10]
 8001926:	460b      	mov	r3, r1
 8001928:	813b      	strh	r3, [r7, #8]
 800192a:	4613      	mov	r3, r2
 800192c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800192e:	f7ff f823 	bl	8000978 <HAL_GetTick>
 8001932:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b20      	cmp	r3, #32
 800193e:	f040 80d9 	bne.w	8001af4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2319      	movs	r3, #25
 8001948:	2201      	movs	r2, #1
 800194a:	496d      	ldr	r1, [pc, #436]	@ (8001b00 <HAL_I2C_Mem_Write+0x1ec>)
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 f971 	bl	8001c34 <I2C_WaitOnFlagUntilTimeout>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001958:	2302      	movs	r3, #2
 800195a:	e0cc      	b.n	8001af6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_I2C_Mem_Write+0x56>
 8001966:	2302      	movs	r3, #2
 8001968:	e0c5      	b.n	8001af6 <HAL_I2C_Mem_Write+0x1e2>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b01      	cmp	r3, #1
 800197e:	d007      	beq.n	8001990 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800199e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2221      	movs	r2, #33	@ 0x21
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2240      	movs	r2, #64	@ 0x40
 80019ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a3a      	ldr	r2, [r7, #32]
 80019ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80019c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001b04 <HAL_I2C_Mem_Write+0x1f0>)
 80019d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019d2:	88f8      	ldrh	r0, [r7, #6]
 80019d4:	893a      	ldrh	r2, [r7, #8]
 80019d6:	8979      	ldrh	r1, [r7, #10]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4603      	mov	r3, r0
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f890 	bl	8001b08 <I2C_RequestMemoryWrite>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d052      	beq.n	8001a94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e081      	b.n	8001af6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fa36 	bl	8001e68 <I2C_WaitOnTXEFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00d      	beq.n	8001a1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d107      	bne.n	8001a1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06b      	b.n	8001af6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d11b      	bne.n	8001a94 <HAL_I2C_Mem_Write+0x180>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d017      	beq.n	8001a94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1aa      	bne.n	80019f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fa29 	bl	8001ef8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d107      	bne.n	8001ac4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ac2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e016      	b.n	8001af6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e000      	b.n	8001af6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001af4:	2302      	movs	r3, #2
  }
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	00100002 	.word	0x00100002
 8001b04:	ffff0000 	.word	0xffff0000

08001b08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	4608      	mov	r0, r1
 8001b12:	4611      	mov	r1, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	817b      	strh	r3, [r7, #10]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	813b      	strh	r3, [r7, #8]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 f878 	bl	8001c34 <I2C_WaitOnFlagUntilTimeout>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00d      	beq.n	8001b66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b58:	d103      	bne.n	8001b62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e05f      	b.n	8001c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	6a3a      	ldr	r2, [r7, #32]
 8001b7a:	492d      	ldr	r1, [pc, #180]	@ (8001c30 <I2C_RequestMemoryWrite+0x128>)
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 f8d3 	bl	8001d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e04c      	b.n	8001c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba4:	6a39      	ldr	r1, [r7, #32]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f95e 	bl	8001e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00d      	beq.n	8001bce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d107      	bne.n	8001bca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e02b      	b.n	8001c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bd4:	893b      	ldrh	r3, [r7, #8]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	e021      	b.n	8001c24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001be0:	893b      	ldrh	r3, [r7, #8]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf0:	6a39      	ldr	r1, [r7, #32]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f938 	bl	8001e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d107      	bne.n	8001c16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e005      	b.n	8001c26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c1a:	893b      	ldrh	r3, [r7, #8]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	00010002 	.word	0x00010002

08001c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c44:	e048      	b.n	8001cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d044      	beq.n	8001cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4e:	f7fe fe93 	bl	8000978 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d302      	bcc.n	8001c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d139      	bne.n	8001cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	0c1b      	lsrs	r3, r3, #16
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d10d      	bne.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	43da      	mvns	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	e00c      	b.n	8001ca4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	43da      	mvns	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4013      	ands	r3, r2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d116      	bne.n	8001cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e023      	b.n	8001d20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	0c1b      	lsrs	r3, r3, #16
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d10d      	bne.n	8001cfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	43da      	mvns	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	4013      	ands	r3, r2
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf0c      	ite	eq
 8001cf4:	2301      	moveq	r3, #1
 8001cf6:	2300      	movne	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	e00c      	b.n	8001d18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	43da      	mvns	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d093      	beq.n	8001c46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d36:	e071      	b.n	8001e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d46:	d123      	bne.n	8001d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	f043 0204 	orr.w	r2, r3, #4
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e067      	b.n	8001e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d96:	d041      	beq.n	8001e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d98:	f7fe fdee 	bl	8000978 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d302      	bcc.n	8001dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d136      	bne.n	8001e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10c      	bne.n	8001dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	bf14      	ite	ne
 8001dca:	2301      	movne	r3, #1
 8001dcc:	2300      	moveq	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	e00b      	b.n	8001dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf14      	ite	ne
 8001de4:	2301      	movne	r3, #1
 8001de6:	2300      	moveq	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d016      	beq.n	8001e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	f043 0220 	orr.w	r2, r3, #32
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e021      	b.n	8001e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	0c1b      	lsrs	r3, r3, #16
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d10c      	bne.n	8001e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	4013      	ands	r3, r2
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf14      	ite	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	2300      	moveq	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	e00b      	b.n	8001e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf14      	ite	ne
 8001e52:	2301      	movne	r3, #1
 8001e54:	2300      	moveq	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f47f af6d 	bne.w	8001d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e74:	e034      	b.n	8001ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f886 	bl	8001f88 <I2C_IsAcknowledgeFailed>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e034      	b.n	8001ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d028      	beq.n	8001ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8e:	f7fe fd73 	bl	8000978 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d302      	bcc.n	8001ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d11d      	bne.n	8001ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eae:	2b80      	cmp	r3, #128	@ 0x80
 8001eb0:	d016      	beq.n	8001ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	f043 0220 	orr.w	r2, r3, #32
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e007      	b.n	8001ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eea:	2b80      	cmp	r3, #128	@ 0x80
 8001eec:	d1c3      	bne.n	8001e76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f04:	e034      	b.n	8001f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 f83e 	bl	8001f88 <I2C_IsAcknowledgeFailed>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e034      	b.n	8001f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d028      	beq.n	8001f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f1e:	f7fe fd2b 	bl	8000978 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d302      	bcc.n	8001f34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d11d      	bne.n	8001f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d016      	beq.n	8001f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5c:	f043 0220 	orr.w	r2, r3, #32
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e007      	b.n	8001f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d1c3      	bne.n	8001f06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f9e:	d11b      	bne.n	8001fd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fa8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f043 0204 	orr.w	r2, r3, #4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e272      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8087 	beq.w	8002112 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002004:	4b92      	ldr	r3, [pc, #584]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b04      	cmp	r3, #4
 800200e:	d00c      	beq.n	800202a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002010:	4b8f      	ldr	r3, [pc, #572]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b08      	cmp	r3, #8
 800201a:	d112      	bne.n	8002042 <HAL_RCC_OscConfig+0x5e>
 800201c:	4b8c      	ldr	r3, [pc, #560]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002028:	d10b      	bne.n	8002042 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202a:	4b89      	ldr	r3, [pc, #548]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d06c      	beq.n	8002110 <HAL_RCC_OscConfig+0x12c>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d168      	bne.n	8002110 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e24c      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x76>
 800204c:	4b80      	ldr	r3, [pc, #512]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a7f      	ldr	r2, [pc, #508]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002052:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	e02e      	b.n	80020b8 <HAL_RCC_OscConfig+0xd4>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x98>
 8002062:	4b7b      	ldr	r3, [pc, #492]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a7a      	ldr	r2, [pc, #488]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b78      	ldr	r3, [pc, #480]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a77      	ldr	r2, [pc, #476]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002074:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e01d      	b.n	80020b8 <HAL_RCC_OscConfig+0xd4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0xbc>
 8002086:	4b72      	ldr	r3, [pc, #456]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a71      	ldr	r2, [pc, #452]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 800208c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b6f      	ldr	r3, [pc, #444]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6e      	ldr	r2, [pc, #440]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0xd4>
 80020a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b68      	ldr	r3, [pc, #416]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a67      	ldr	r2, [pc, #412]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe fc5a 	bl	8000978 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c8:	f7fe fc56 	bl	8000978 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	@ 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e200      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b5d      	ldr	r3, [pc, #372]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0xe4>
 80020e6:	e014      	b.n	8002112 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7fe fc46 	bl	8000978 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f0:	f7fe fc42 	bl	8000978 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	@ 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e1ec      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	4b53      	ldr	r3, [pc, #332]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x10c>
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d063      	beq.n	80021e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800211e:	4b4c      	ldr	r3, [pc, #304]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00b      	beq.n	8002142 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800212a:	4b49      	ldr	r3, [pc, #292]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b08      	cmp	r3, #8
 8002134:	d11c      	bne.n	8002170 <HAL_RCC_OscConfig+0x18c>
 8002136:	4b46      	ldr	r3, [pc, #280]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d116      	bne.n	8002170 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	4b43      	ldr	r3, [pc, #268]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_RCC_OscConfig+0x176>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d001      	beq.n	800215a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e1c0      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215a:	4b3d      	ldr	r3, [pc, #244]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4939      	ldr	r1, [pc, #228]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	e03a      	b.n	80021e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002178:	4b36      	ldr	r3, [pc, #216]	@ (8002254 <HAL_RCC_OscConfig+0x270>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7fe fbfb 	bl	8000978 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002186:	f7fe fbf7 	bl	8000978 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e1a1      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	4b2d      	ldr	r3, [pc, #180]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4927      	ldr	r1, [pc, #156]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
 80021b8:	e015      	b.n	80021e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ba:	4b26      	ldr	r3, [pc, #152]	@ (8002254 <HAL_RCC_OscConfig+0x270>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7fe fbda 	bl	8000978 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c8:	f7fe fbd6 	bl	8000978 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e180      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d03a      	beq.n	8002268 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d019      	beq.n	800222e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fa:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7fe fbba 	bl	8000978 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002208:	f7fe fbb6 	bl	8000978 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e160      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <HAL_RCC_OscConfig+0x26c>)
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002226:	2001      	movs	r0, #1
 8002228:	f000 face 	bl	80027c8 <RCC_Delay>
 800222c:	e01c      	b.n	8002268 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002234:	f7fe fba0 	bl	8000978 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223a:	e00f      	b.n	800225c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223c:	f7fe fb9c 	bl	8000978 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d908      	bls.n	800225c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e146      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	42420000 	.word	0x42420000
 8002258:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	4b92      	ldr	r3, [pc, #584]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e9      	bne.n	800223c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80a6 	beq.w	80023c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227a:	4b8b      	ldr	r3, [pc, #556]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10d      	bne.n	80022a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	4b88      	ldr	r3, [pc, #544]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4a87      	ldr	r2, [pc, #540]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002290:	61d3      	str	r3, [r2, #28]
 8002292:	4b85      	ldr	r3, [pc, #532]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229e:	2301      	movs	r3, #1
 80022a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b82      	ldr	r3, [pc, #520]	@ (80024ac <HAL_RCC_OscConfig+0x4c8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d118      	bne.n	80022e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ae:	4b7f      	ldr	r3, [pc, #508]	@ (80024ac <HAL_RCC_OscConfig+0x4c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a7e      	ldr	r2, [pc, #504]	@ (80024ac <HAL_RCC_OscConfig+0x4c8>)
 80022b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ba:	f7fe fb5d 	bl	8000978 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c2:	f7fe fb59 	bl	8000978 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b64      	cmp	r3, #100	@ 0x64
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e103      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	4b75      	ldr	r3, [pc, #468]	@ (80024ac <HAL_RCC_OscConfig+0x4c8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x312>
 80022e8:	4b6f      	ldr	r3, [pc, #444]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4a6e      	ldr	r2, [pc, #440]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6213      	str	r3, [r2, #32]
 80022f4:	e02d      	b.n	8002352 <HAL_RCC_OscConfig+0x36e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x334>
 80022fe:	4b6a      	ldr	r3, [pc, #424]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4a69      	ldr	r2, [pc, #420]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	6213      	str	r3, [r2, #32]
 800230a:	4b67      	ldr	r3, [pc, #412]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a66      	ldr	r2, [pc, #408]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	e01c      	b.n	8002352 <HAL_RCC_OscConfig+0x36e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b05      	cmp	r3, #5
 800231e:	d10c      	bne.n	800233a <HAL_RCC_OscConfig+0x356>
 8002320:	4b61      	ldr	r3, [pc, #388]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4a60      	ldr	r2, [pc, #384]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	6213      	str	r3, [r2, #32]
 800232c:	4b5e      	ldr	r3, [pc, #376]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a5d      	ldr	r2, [pc, #372]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	e00b      	b.n	8002352 <HAL_RCC_OscConfig+0x36e>
 800233a:	4b5b      	ldr	r3, [pc, #364]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4a5a      	ldr	r2, [pc, #360]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6213      	str	r3, [r2, #32]
 8002346:	4b58      	ldr	r3, [pc, #352]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a57      	ldr	r2, [pc, #348]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f023 0304 	bic.w	r3, r3, #4
 8002350:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d015      	beq.n	8002386 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235a:	f7fe fb0d 	bl	8000978 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe fb09 	bl	8000978 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0b1      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	4b4b      	ldr	r3, [pc, #300]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ee      	beq.n	8002362 <HAL_RCC_OscConfig+0x37e>
 8002384:	e014      	b.n	80023b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7fe faf7 	bl	8000978 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe faf3 	bl	8000978 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e09b      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a4:	4b40      	ldr	r3, [pc, #256]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1ee      	bne.n	800238e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d105      	bne.n	80023c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b6:	4b3c      	ldr	r3, [pc, #240]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a3b      	ldr	r2, [pc, #236]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8087 	beq.w	80024da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023cc:	4b36      	ldr	r3, [pc, #216]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d061      	beq.n	800249c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d146      	bne.n	800246e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e0:	4b33      	ldr	r3, [pc, #204]	@ (80024b0 <HAL_RCC_OscConfig+0x4cc>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7fe fac7 	bl	8000978 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ee:	f7fe fac3 	bl	8000978 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e06d      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002400:	4b29      	ldr	r3, [pc, #164]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f0      	bne.n	80023ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002414:	d108      	bne.n	8002428 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002416:	4b24      	ldr	r3, [pc, #144]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	4921      	ldr	r1, [pc, #132]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002428:	4b1f      	ldr	r3, [pc, #124]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a19      	ldr	r1, [r3, #32]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	430b      	orrs	r3, r1
 800243a:	491b      	ldr	r1, [pc, #108]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b1b      	ldr	r3, [pc, #108]	@ (80024b0 <HAL_RCC_OscConfig+0x4cc>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7fe fa97 	bl	8000978 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244e:	f7fe fa93 	bl	8000978 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e03d      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002460:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x46a>
 800246c:	e035      	b.n	80024da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246e:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <HAL_RCC_OscConfig+0x4cc>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7fe fa80 	bl	8000978 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fa7c 	bl	8000978 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e026      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x498>
 800249a:	e01e      	b.n	80024da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e019      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40007000 	.word	0x40007000
 80024b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_RCC_OscConfig+0x500>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000

080024e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0d0      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024fc:	4b6a      	ldr	r3, [pc, #424]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d910      	bls.n	800252c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b67      	ldr	r3, [pc, #412]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0207 	bic.w	r2, r3, #7
 8002512:	4965      	ldr	r1, [pc, #404]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b63      	ldr	r3, [pc, #396]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b8      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002544:	4b59      	ldr	r3, [pc, #356]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a58      	ldr	r2, [pc, #352]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800254e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800255c:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a52      	ldr	r2, [pc, #328]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002566:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b50      	ldr	r3, [pc, #320]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	494d      	ldr	r1, [pc, #308]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d040      	beq.n	8002608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b47      	ldr	r3, [pc, #284]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d115      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e07f      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	4b41      	ldr	r3, [pc, #260]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e073      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b6:	4b3d      	ldr	r3, [pc, #244]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e06b      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c6:	4b39      	ldr	r3, [pc, #228]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f023 0203 	bic.w	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4936      	ldr	r1, [pc, #216]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d8:	f7fe f9ce 	bl	8000978 <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e0:	f7fe f9ca 	bl	8000978 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e053      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	4b2d      	ldr	r3, [pc, #180]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 020c 	and.w	r2, r3, #12
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	429a      	cmp	r2, r3
 8002606:	d1eb      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002608:	4b27      	ldr	r3, [pc, #156]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d210      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b24      	ldr	r3, [pc, #144]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 0207 	bic.w	r2, r3, #7
 800261e:	4922      	ldr	r1, [pc, #136]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b20      	ldr	r3, [pc, #128]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e032      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4916      	ldr	r1, [pc, #88]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002662:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	490e      	ldr	r1, [pc, #56]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002676:	f000 f821 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	490a      	ldr	r1, [pc, #40]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	fa22 f303 	lsr.w	r3, r2, r3
 800268e:	4a09      	ldr	r2, [pc, #36]	@ (80026b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe f92c 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40022000 	.word	0x40022000
 80026ac:	40021000 	.word	0x40021000
 80026b0:	080039bc 	.word	0x080039bc
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	2300      	movs	r3, #0
 80026d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x94>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x30>
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0x36>
 80026ea:	e027      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ec:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ee:	613b      	str	r3, [r7, #16]
      break;
 80026f0:	e027      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	0c9b      	lsrs	r3, r3, #18
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	4a17      	ldr	r2, [pc, #92]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026fc:	5cd3      	ldrb	r3, [r2, r3]
 80026fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d010      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800270a:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x94>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	0c5b      	lsrs	r3, r3, #17
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	4a11      	ldr	r2, [pc, #68]	@ (800275c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a0d      	ldr	r2, [pc, #52]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x98>)
 800271e:	fb03 f202 	mul.w	r2, r3, r2
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	fbb2 f3f3 	udiv	r3, r2, r3
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	e004      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a0c      	ldr	r2, [pc, #48]	@ (8002760 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002730:	fb02 f303 	mul.w	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	613b      	str	r3, [r7, #16]
      break;
 800273a:	e002      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800273c:	4b05      	ldr	r3, [pc, #20]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x98>)
 800273e:	613b      	str	r3, [r7, #16]
      break;
 8002740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002742:	693b      	ldr	r3, [r7, #16]
}
 8002744:	4618      	mov	r0, r3
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
 8002754:	007a1200 	.word	0x007a1200
 8002758:	080039d4 	.word	0x080039d4
 800275c:	080039e4 	.word	0x080039e4
 8002760:	003d0900 	.word	0x003d0900

08002764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002768:	4b02      	ldr	r3, [pc, #8]	@ (8002774 <HAL_RCC_GetHCLKFreq+0x10>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	20000000 	.word	0x20000000

08002778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800277c:	f7ff fff2 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	4903      	ldr	r1, [pc, #12]	@ (800279c <HAL_RCC_GetPCLK1Freq+0x24>)
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000
 800279c:	080039cc 	.word	0x080039cc

080027a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027a4:	f7ff ffde 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0adb      	lsrs	r3, r3, #11
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	@ (80027c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	080039cc 	.word	0x080039cc

080027c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027d0:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <RCC_Delay+0x34>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <RCC_Delay+0x38>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0a5b      	lsrs	r3, r3, #9
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	fb02 f303 	mul.w	r3, r2, r3
 80027e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027e4:	bf00      	nop
  }
  while (Delay --);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1e5a      	subs	r2, r3, #1
 80027ea:	60fa      	str	r2, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f9      	bne.n	80027e4 <RCC_Delay+0x1c>
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	20000000 	.word	0x20000000
 8002800:	10624dd3 	.word	0x10624dd3

08002804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e041      	b.n	800289a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fd ff34 	bl	8000698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3304      	adds	r3, #4
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f000 f82e 	bl	80028a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a33      	ldr	r2, [pc, #204]	@ (8002984 <TIM_Base_SetConfig+0xe0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d013      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a32      	ldr	r2, [pc, #200]	@ (8002988 <TIM_Base_SetConfig+0xe4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00f      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ca:	d00b      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a2f      	ldr	r2, [pc, #188]	@ (800298c <TIM_Base_SetConfig+0xe8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d007      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a2e      	ldr	r2, [pc, #184]	@ (8002990 <TIM_Base_SetConfig+0xec>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d003      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a2d      	ldr	r2, [pc, #180]	@ (8002994 <TIM_Base_SetConfig+0xf0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d108      	bne.n	80028f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a22      	ldr	r2, [pc, #136]	@ (8002984 <TIM_Base_SetConfig+0xe0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <TIM_Base_SetConfig+0x82>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a21      	ldr	r2, [pc, #132]	@ (8002988 <TIM_Base_SetConfig+0xe4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00f      	beq.n	8002926 <TIM_Base_SetConfig+0x82>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290c:	d00b      	beq.n	8002926 <TIM_Base_SetConfig+0x82>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1e      	ldr	r2, [pc, #120]	@ (800298c <TIM_Base_SetConfig+0xe8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <TIM_Base_SetConfig+0x82>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a1d      	ldr	r2, [pc, #116]	@ (8002990 <TIM_Base_SetConfig+0xec>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d003      	beq.n	8002926 <TIM_Base_SetConfig+0x82>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a1c      	ldr	r2, [pc, #112]	@ (8002994 <TIM_Base_SetConfig+0xf0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d108      	bne.n	8002938 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800292c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a09      	ldr	r2, [pc, #36]	@ (8002984 <TIM_Base_SetConfig+0xe0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d003      	beq.n	800296c <TIM_Base_SetConfig+0xc8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a08      	ldr	r2, [pc, #32]	@ (8002988 <TIM_Base_SetConfig+0xe4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d103      	bne.n	8002974 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	615a      	str	r2, [r3, #20]
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	40012c00 	.word	0x40012c00
 8002988:	40013400 	.word	0x40013400
 800298c:	40000400 	.word	0x40000400
 8002990:	40000800 	.word	0x40000800
 8002994:	40000c00 	.word	0x40000c00

08002998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e050      	b.n	8002a52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1b      	ldr	r2, [pc, #108]	@ (8002a5c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d018      	beq.n	8002a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a19      	ldr	r2, [pc, #100]	@ (8002a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a06:	d00e      	beq.n	8002a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a15      	ldr	r2, [pc, #84]	@ (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d009      	beq.n	8002a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a14      	ldr	r2, [pc, #80]	@ (8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d004      	beq.n	8002a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a12      	ldr	r2, [pc, #72]	@ (8002a6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d10c      	bne.n	8002a40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40013400 	.word	0x40013400
 8002a64:	40000400 	.word	0x40000400
 8002a68:	40000800 	.word	0x40000800
 8002a6c:	40000c00 	.word	0x40000c00

08002a70 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e033      	b.n	8002aea <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fd fe48 	bl	800072c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fb5b 	bl	8003160 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ac8:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d117      	bne.n	8002b5a <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d012      	beq.n	8002b5a <HAL_USART_IRQHandler+0x66>
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b22      	cmp	r3, #34	@ 0x22
 8002b48:	d103      	bne.n	8002b52 <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f9b4 	bl	8002eb8 <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8002b50:	e0e9      	b.n	8002d26 <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fa36 	bl	8002fc4 <USART_TransmitReceive_IT>
      return;
 8002b58:	e0e5      	b.n	8002d26 <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80bb 	beq.w	8002cd8 <HAL_USART_IRQHandler+0x1e4>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_USART_IRQHandler+0x84>
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80b0 	beq.w	8002cd8 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_USART_IRQHandler+0xa4>
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_USART_IRQHandler+0xc4>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	f043 0202 	orr.w	r2, r3, #2
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_USART_IRQHandler+0xe4>
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd0:	f043 0204 	orr.w	r2, r3, #4
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00f      	beq.n	8002c02 <HAL_USART_IRQHandler+0x10e>
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <HAL_USART_IRQHandler+0x102>
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f043 0208 	orr.w	r2, r3, #8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 808c 	beq.w	8002d24 <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d011      	beq.n	8002c3a <HAL_USART_IRQHandler+0x146>
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00c      	beq.n	8002c3a <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b22      	cmp	r3, #34	@ 0x22
 8002c2a:	d103      	bne.n	8002c34 <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f943 	bl	8002eb8 <USART_Receive_IT>
 8002c32:	e002      	b.n	8002c3a <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f9c5 	bl	8002fc4 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <HAL_USART_IRQHandler+0x16e>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d031      	beq.n	8002cc6 <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f888 	bl	8002d78 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d023      	beq.n	8002cbe <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c84:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d013      	beq.n	8002cb6 <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c92:	4a26      	ldr	r2, [pc, #152]	@ (8002d2c <HAL_USART_IRQHandler+0x238>)
 8002c94:	635a      	str	r2, [r3, #52]	@ 0x34

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe f81e 	bl	8000cdc <HAL_DMA_Abort_IT>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d016      	beq.n	8002cd4 <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002cb4:	e00e      	b.n	8002cd4 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f855 	bl	8002d66 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002cbc:	e00a      	b.n	8002cd4 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f851 	bl	8002d66 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002cc4:	e006      	b.n	8002cd4 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f84d 	bl	8002d66 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8002cd2:	e027      	b.n	8002d24 <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002cd4:	bf00      	nop
    return;
 8002cd6:	e025      	b.n	8002d24 <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d012      	beq.n	8002d08 <HAL_USART_IRQHandler+0x214>
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b12      	cmp	r3, #18
 8002cf6:	d103      	bne.n	8002d00 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f86e 	bl	8002dda <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8002cfe:	e012      	b.n	8002d26 <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f95f 	bl	8002fc4 <USART_TransmitReceive_IT>
    return;
 8002d06:	e00e      	b.n	8002d26 <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <HAL_USART_IRQHandler+0x232>
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d004      	beq.n	8002d26 <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f8ab 	bl	8002e78 <USART_EndTransmit_IT>
    return;
 8002d22:	e000      	b.n	8002d26 <HAL_USART_IRQHandler+0x232>
    return;
 8002d24:	bf00      	nop
  }
}
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	08002db3 	.word	0x08002db3

08002d30 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8002d8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	865a      	strh	r2, [r3, #50]	@ 0x32
  husart->TxXferCount = 0x00U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff ffca 	bl	8002d66 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b085      	sub	sp, #20
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b12      	cmp	r3, #18
 8002dec:	d13e      	bne.n	8002e6c <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002df6:	d114      	bne.n	8002e22 <USART_Transmit_IT+0x48>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d110      	bne.n	8002e22 <USART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) husart->pTxBuffPtr;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e14:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	1c9a      	adds	r2, r3, #2
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e20:	e008      	b.n	8002e34 <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	1c59      	adds	r1, r3, #1
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6251      	str	r1, [r2, #36]	@ 0x24
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4619      	mov	r1, r3
 8002e42:	8551      	strh	r1, [r2, #42]	@ 0x2a
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10f      	bne.n	8002e68 <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e56:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e000      	b.n	8002e6e <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
  }
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff ff41 	bl	8002d30 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b22      	cmp	r3, #34	@ 0x22
 8002eca:	d176      	bne.n	8002fba <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed4:	d117      	bne.n	8002f06 <USART_Receive_IT+0x4e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d113      	bne.n	8002f06 <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	1c9a      	adds	r2, r3, #2
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f04:	e026      	b.n	8002f54 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f18:	d007      	beq.n	8002f2a <USART_Receive_IT+0x72>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <USART_Receive_IT+0x80>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e008      	b.n	8002f4a <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    husart->RxXferCount--;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	865a      	strh	r2, [r3, #50]	@ 0x32

    if (husart->RxXferCount == 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d120      	bne.n	8002fae <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0220 	bic.w	r2, r2, #32
 8002f7a:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f8a:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff fecc 	bl	8002d42 <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e006      	b.n	8002fbc <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	22ff      	movs	r2, #255	@ 0xff
 8002fb4:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e000      	b.n	8002fbc <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002fba:	2302      	movs	r3, #2
  }
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  const uint16_t *pdatatx16bits;
  uint16_t *pdatarx16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b32      	cmp	r3, #50	@ 0x32
 8002fd6:	f040 80bd 	bne.w	8003154 <USART_TransmitReceive_IT+0x190>
  {
    if (husart->TxXferCount != 0x00U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d03d      	beq.n	8003060 <USART_TransmitReceive_IT+0x9c>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fee:	2b80      	cmp	r3, #128	@ 0x80
 8002ff0:	d136      	bne.n	8003060 <USART_TransmitReceive_IT+0x9c>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ffa:	d114      	bne.n	8003026 <USART_TransmitReceive_IT+0x62>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d110      	bne.n	8003026 <USART_TransmitReceive_IT+0x62>
        {
          pdatatx16bits = (const uint16_t *) husart->pTxBuffPtr;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003008:	60fb      	str	r3, [r7, #12]
          husart->Instance->DR = (uint16_t)(*pdatatx16bits & (uint16_t)0x01FF);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003018:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	1c9a      	adds	r2, r3, #2
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	625a      	str	r2, [r3, #36]	@ 0x24
 8003024:	e008      	b.n	8003038 <USART_TransmitReceive_IT+0x74>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	1c59      	adds	r1, r3, #1
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6251      	str	r1, [r2, #36]	@ 0x24
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d107      	bne.n	8003060 <USART_TransmitReceive_IT+0x9c>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800305e:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d04c      	beq.n	8003104 <USART_TransmitReceive_IT+0x140>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b20      	cmp	r3, #32
 8003076:	d145      	bne.n	8003104 <USART_TransmitReceive_IT+0x140>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003080:	d115      	bne.n	80030ae <USART_TransmitReceive_IT+0xea>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d111      	bne.n	80030ae <USART_TransmitReceive_IT+0xea>
        {
          pdatarx16bits = (uint16_t *) husart->pRxBuffPtr;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308e:	60bb      	str	r3, [r7, #8]
          *pdatarx16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	b29b      	uxth	r3, r3
 8003098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309c:	b29a      	uxth	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	801a      	strh	r2, [r3, #0]
          husart->pRxBuffPtr += 2U;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a6:	1c9a      	adds	r2, r3, #2
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030ac:	e023      	b.n	80030f6 <USART_TransmitReceive_IT+0x132>
        }
        else
        {
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b6:	d007      	beq.n	80030c8 <USART_TransmitReceive_IT+0x104>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10b      	bne.n	80030d8 <USART_TransmitReceive_IT+0x114>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d107      	bne.n	80030d8 <USART_TransmitReceive_IT+0x114>
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e009      	b.n	80030ec <USART_TransmitReceive_IT+0x128>
          }
          else
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	62da      	str	r2, [r3, #44]	@ 0x2c
        }

        husart->RxXferCount--;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	865a      	strh	r2, [r3, #50]	@ 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d120      	bne.n	8003150 <USART_TransmitReceive_IT+0x18c>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0220 	bic.w	r2, r2, #32
 800311c:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800312c:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff fe04 	bl	8002d54 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e002      	b.n	8003156 <USART_TransmitReceive_IT+0x192>
    }

    return HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <USART_TransmitReceive_IT+0x192>
  }
  else
  {
    return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
  }
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 020c 	bic.w	r2, r2, #12
 800317a:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800318a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003194:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80031aa:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80031c2:	f023 030c 	bic.w	r3, r3, #12
 80031c6:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80031f4:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a53      	ldr	r2, [pc, #332]	@ (8003348 <USART_SetConfig+0x1e8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d14f      	bne.n	80032a0 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003200:	f7ff face 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8003204:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	009a      	lsls	r2, r3, #2
 8003210:	441a      	add	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	4a4b      	ldr	r2, [pc, #300]	@ (800334c <USART_SetConfig+0x1ec>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	0119      	lsls	r1, r3, #4
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009a      	lsls	r2, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	fbb2 f2f3 	udiv	r2, r2, r3
 800323c:	4b43      	ldr	r3, [pc, #268]	@ (800334c <USART_SetConfig+0x1ec>)
 800323e:	fba3 0302 	umull	r0, r3, r3, r2
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	2064      	movs	r0, #100	@ 0x64
 8003246:	fb00 f303 	mul.w	r3, r0, r3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	3332      	adds	r3, #50	@ 0x32
 8003250:	4a3e      	ldr	r2, [pc, #248]	@ (800334c <USART_SetConfig+0x1ec>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 800325e:	4419      	add	r1, r3
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	009a      	lsls	r2, r3, #2
 800326a:	441a      	add	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	fbb2 f2f3 	udiv	r2, r2, r3
 8003276:	4b35      	ldr	r3, [pc, #212]	@ (800334c <USART_SetConfig+0x1ec>)
 8003278:	fba3 0302 	umull	r0, r3, r3, r2
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	2064      	movs	r0, #100	@ 0x64
 8003280:	fb00 f303 	mul.w	r3, r0, r3
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	3332      	adds	r3, #50	@ 0x32
 800328a:	4a30      	ldr	r2, [pc, #192]	@ (800334c <USART_SetConfig+0x1ec>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	f003 020f 	and.w	r2, r3, #15
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	440a      	add	r2, r1
 800329c:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 800329e:	e04e      	b.n	800333e <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 80032a0:	f7ff fa6a 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 80032a4:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009a      	lsls	r2, r3, #2
 80032b0:	441a      	add	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032bc:	4a23      	ldr	r2, [pc, #140]	@ (800334c <USART_SetConfig+0x1ec>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	0119      	lsls	r1, r3, #4
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	009a      	lsls	r2, r3, #2
 80032d0:	441a      	add	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032dc:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <USART_SetConfig+0x1ec>)
 80032de:	fba3 0302 	umull	r0, r3, r3, r2
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2064      	movs	r0, #100	@ 0x64
 80032e6:	fb00 f303 	mul.w	r3, r0, r3
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	3332      	adds	r3, #50	@ 0x32
 80032f0:	4a16      	ldr	r2, [pc, #88]	@ (800334c <USART_SetConfig+0x1ec>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 80032fe:	4419      	add	r1, r3
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	009a      	lsls	r2, r3, #2
 800330a:	441a      	add	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	fbb2 f2f3 	udiv	r2, r2, r3
 8003316:	4b0d      	ldr	r3, [pc, #52]	@ (800334c <USART_SetConfig+0x1ec>)
 8003318:	fba3 0302 	umull	r0, r3, r3, r2
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	2064      	movs	r0, #100	@ 0x64
 8003320:	fb00 f303 	mul.w	r3, r0, r3
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	3332      	adds	r3, #50	@ 0x32
 800332a:	4a08      	ldr	r2, [pc, #32]	@ (800334c <USART_SetConfig+0x1ec>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	440a      	add	r2, r1
 800333c:	609a      	str	r2, [r3, #8]
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40013800 	.word	0x40013800
 800334c:	51eb851f 	.word	0x51eb851f

08003350 <OLED_Init>:
 * @function: void OLED_Init(void)
 * @description: OLED初始化
 * @return {*}
 */
void OLED_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 8003356:	20c8      	movs	r0, #200	@ 0xc8
 8003358:	f7fd fb18 	bl	800098c <HAL_Delay>

	uint8_t i = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<23; i++)
 8003360:	2300      	movs	r3, #0
 8003362:	71fb      	strb	r3, [r7, #7]
 8003364:	e008      	b.n	8003378 <OLED_Init+0x28>
	{
		OLED_WR_CMD(CMD_Data[i]);
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <OLED_Init+0x38>)
 800336a:	5cd3      	ldrb	r3, [r2, r3]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 f80d 	bl	800338c <OLED_WR_CMD>
	for(i=0; i<23; i++)
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	3301      	adds	r3, #1
 8003376:	71fb      	strb	r3, [r7, #7]
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	2b16      	cmp	r3, #22
 800337c:	d9f3      	bls.n	8003366 <OLED_Init+0x16>
	}

}
 800337e:	bf00      	nop
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	2000000c 	.word	0x2000000c

0800338c <OLED_WR_CMD>:
 * @description: 向设备写控制命令
 * @param {uint8_t} cmd 芯片手册规定的命令
 * @return {*}
 */
void OLED_WR_CMD(uint8_t cmd)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af04      	add	r7, sp, #16
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&cmd,1,0x100);
 8003396:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800339a:	9302      	str	r3, [sp, #8]
 800339c:	2301      	movs	r3, #1
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2301      	movs	r3, #1
 80033a6:	2200      	movs	r2, #0
 80033a8:	2178      	movs	r1, #120	@ 0x78
 80033aa:	4803      	ldr	r0, [pc, #12]	@ (80033b8 <OLED_WR_CMD+0x2c>)
 80033ac:	f7fe fab2 	bl	8001914 <HAL_I2C_Mem_Write>
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	200000c0 	.word	0x200000c0

080033bc <OLED_WR_DATA>:
 * @description: 向设备写控制数据
 * @param {uint8_t} data 数据
 * @return {*}
 */
void OLED_WR_DATA(uint8_t data)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af04      	add	r7, sp, #16
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&data,1,0x100);
 80033c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033ca:	9302      	str	r3, [sp, #8]
 80033cc:	2301      	movs	r3, #1
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2301      	movs	r3, #1
 80033d6:	2240      	movs	r2, #64	@ 0x40
 80033d8:	2178      	movs	r1, #120	@ 0x78
 80033da:	4803      	ldr	r0, [pc, #12]	@ (80033e8 <OLED_WR_DATA+0x2c>)
 80033dc:	f7fe fa9a 	bl	8001914 <HAL_I2C_Mem_Write>
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	200000c0 	.word	0x200000c0

080033ec <OLED_Clear>:
 * @function: OLED_Clear(void)
 * @description: 清屏,整个屏幕是黑色的!和没点亮一样!!!
 * @return {*}
 */
void OLED_Clear(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	71fb      	strb	r3, [r7, #7]
 80033f6:	e01b      	b.n	8003430 <OLED_Clear+0x44>
	{
		OLED_WR_CMD(0xb0+i);    //设置页地址（0~7）
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	3b50      	subs	r3, #80	@ 0x50
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff ffc4 	bl	800338c <OLED_WR_CMD>
		OLED_WR_CMD(0x00);      //设置显示位置—列低地址
 8003404:	2000      	movs	r0, #0
 8003406:	f7ff ffc1 	bl	800338c <OLED_WR_CMD>
		OLED_WR_CMD(0x10);      //设置显示位置—列高地址
 800340a:	2010      	movs	r0, #16
 800340c:	f7ff ffbe 	bl	800338c <OLED_WR_CMD>
		for(n=0;n<128;n++)
 8003410:	2300      	movs	r3, #0
 8003412:	71bb      	strb	r3, [r7, #6]
 8003414:	e005      	b.n	8003422 <OLED_Clear+0x36>
			OLED_WR_DATA(0);
 8003416:	2000      	movs	r0, #0
 8003418:	f7ff ffd0 	bl	80033bc <OLED_WR_DATA>
		for(n=0;n<128;n++)
 800341c:	79bb      	ldrb	r3, [r7, #6]
 800341e:	3301      	adds	r3, #1
 8003420:	71bb      	strb	r3, [r7, #6]
 8003422:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003426:	2b00      	cmp	r3, #0
 8003428:	daf5      	bge.n	8003416 <OLED_Clear+0x2a>
	for(i=0;i<8;i++)
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	3301      	adds	r3, #1
 800342e:	71fb      	strb	r3, [r7, #7]
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	2b07      	cmp	r3, #7
 8003434:	d9e0      	bls.n	80033f8 <OLED_Clear+0xc>
	}
}
 8003436:	bf00      	nop
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <OLED_Set_Pos>:
 * @description: 坐标设置
 * @param {uint8_t} x,y
 * @return {*}
 */
void OLED_Set_Pos(uint8_t x, uint8_t y)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	460a      	mov	r2, r1
 800344a:	71fb      	strb	r3, [r7, #7]
 800344c:	4613      	mov	r3, r2
 800344e:	71bb      	strb	r3, [r7, #6]
	OLED_WR_CMD(0xb0+y);	//设置页地址（0~7）
 8003450:	79bb      	ldrb	r3, [r7, #6]
 8003452:	3b50      	subs	r3, #80	@ 0x50
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff98 	bl	800338c <OLED_WR_CMD>
	OLED_WR_CMD(((x&0xf0)>>4)|0x10); //设置显示位置—列高地址
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	b2db      	uxtb	r3, r3
 8003462:	f043 0310 	orr.w	r3, r3, #16
 8003466:	b2db      	uxtb	r3, r3
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff ff8f 	bl	800338c <OLED_WR_CMD>
	OLED_WR_CMD(x&0x0f);	//设置显示位置—列低地址
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	b2db      	uxtb	r3, r3
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff ff88 	bl	800338c <OLED_WR_CMD>
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <oled_pow>:
 * @description: m^n函数
 * @param {uint8_t} m,n
 * @return {unsigned int} result
 */
unsigned int oled_pow(uint8_t m,uint8_t n)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	460a      	mov	r2, r1
 800348e:	71fb      	strb	r3, [r7, #7]
 8003490:	4613      	mov	r3, r2
 8003492:	71bb      	strb	r3, [r7, #6]
	unsigned int result=1;
 8003494:	2301      	movs	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8003498:	e004      	b.n	80034a4 <oled_pow+0x20>
 800349a:	79fa      	ldrb	r2, [r7, #7]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	fb02 f303 	mul.w	r3, r2, r3
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	79bb      	ldrb	r3, [r7, #6]
 80034a6:	1e5a      	subs	r2, r3, #1
 80034a8:	71ba      	strb	r2, [r7, #6]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f5      	bne.n	800349a <oled_pow+0x16>
	return result;
 80034ae:	68fb      	ldr	r3, [r7, #12]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
	...

080034bc <OLED_ShowChar>:
 * @param {uint8_t} Char_Size待显示字符的字体大小,选择字体 16/12
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size,uint8_t Color_Turn)
{
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4604      	mov	r4, r0
 80034c4:	4608      	mov	r0, r1
 80034c6:	4611      	mov	r1, r2
 80034c8:	461a      	mov	r2, r3
 80034ca:	4623      	mov	r3, r4
 80034cc:	71fb      	strb	r3, [r7, #7]
 80034ce:	4603      	mov	r3, r0
 80034d0:	71bb      	strb	r3, [r7, #6]
 80034d2:	460b      	mov	r3, r1
 80034d4:	717b      	strb	r3, [r7, #5]
 80034d6:	4613      	mov	r3, r2
 80034d8:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;
 80034da:	2300      	movs	r3, #0
 80034dc:	73bb      	strb	r3, [r7, #14]
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//得到偏移后的值
 80034e2:	797b      	ldrb	r3, [r7, #5]
 80034e4:	3b20      	subs	r3, #32
 80034e6:	73bb      	strb	r3, [r7, #14]
		if(x>128-1){x=0;y=y+2;}
 80034e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	da04      	bge.n	80034fa <OLED_ShowChar+0x3e>
 80034f0:	2300      	movs	r3, #0
 80034f2:	71fb      	strb	r3, [r7, #7]
 80034f4:	79bb      	ldrb	r3, [r7, #6]
 80034f6:	3302      	adds	r3, #2
 80034f8:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 80034fa:	793b      	ldrb	r3, [r7, #4]
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d154      	bne.n	80035aa <OLED_ShowChar+0xee>
		{
			OLED_Set_Pos(x,y);
 8003500:	79ba      	ldrb	r2, [r7, #6]
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff ff9a 	bl	8003440 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	e01b      	b.n	800354a <OLED_ShowChar+0x8e>
				{
				  if(Color_Turn)
 8003512:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <OLED_ShowChar+0x76>
					  OLED_WR_DATA(~F8X16[c*16+i]);
 800351a:	7bbb      	ldrb	r3, [r7, #14]
 800351c:	011a      	lsls	r2, r3, #4
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	4413      	add	r3, r2
 8003522:	4a3c      	ldr	r2, [pc, #240]	@ (8003614 <OLED_ShowChar+0x158>)
 8003524:	5cd3      	ldrb	r3, [r2, r3]
 8003526:	43db      	mvns	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff46 	bl	80033bc <OLED_WR_DATA>
 8003530:	e008      	b.n	8003544 <OLED_ShowChar+0x88>
				  else
					  OLED_WR_DATA(F8X16[c*16+i]);
 8003532:	7bbb      	ldrb	r3, [r7, #14]
 8003534:	011a      	lsls	r2, r3, #4
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	4413      	add	r3, r2
 800353a:	4a36      	ldr	r2, [pc, #216]	@ (8003614 <OLED_ShowChar+0x158>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff ff3c 	bl	80033bc <OLED_WR_DATA>
			for(i=0;i<8;i++)
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	3301      	adds	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	2b07      	cmp	r3, #7
 800354e:	d9e0      	bls.n	8003512 <OLED_ShowChar+0x56>
				}
			OLED_Set_Pos(x,y+1);
 8003550:	79bb      	ldrb	r3, [r7, #6]
 8003552:	3301      	adds	r3, #1
 8003554:	b2da      	uxtb	r2, r3
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff ff70 	bl	8003440 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	e01d      	b.n	80035a2 <OLED_ShowChar+0xe6>
			    {
				  if(Color_Turn)
 8003566:	f897 3020 	ldrb.w	r3, [r7, #32]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <OLED_ShowChar+0xcc>
					  OLED_WR_DATA(~F8X16[c*16+i+8]);
 800356e:	7bbb      	ldrb	r3, [r7, #14]
 8003570:	011a      	lsls	r2, r3, #4
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	4413      	add	r3, r2
 8003576:	3308      	adds	r3, #8
 8003578:	4a26      	ldr	r2, [pc, #152]	@ (8003614 <OLED_ShowChar+0x158>)
 800357a:	5cd3      	ldrb	r3, [r2, r3]
 800357c:	43db      	mvns	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff1b 	bl	80033bc <OLED_WR_DATA>
 8003586:	e009      	b.n	800359c <OLED_ShowChar+0xe0>
				  else
					  OLED_WR_DATA(F8X16[c*16+i+8]);
 8003588:	7bbb      	ldrb	r3, [r7, #14]
 800358a:	011a      	lsls	r2, r3, #4
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	4413      	add	r3, r2
 8003590:	3308      	adds	r3, #8
 8003592:	4a20      	ldr	r2, [pc, #128]	@ (8003614 <OLED_ShowChar+0x158>)
 8003594:	5cd3      	ldrb	r3, [r2, r3]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff ff10 	bl	80033bc <OLED_WR_DATA>
			for(i=0;i<8;i++)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	3301      	adds	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b07      	cmp	r3, #7
 80035a6:	d9de      	bls.n	8003566 <OLED_ShowChar+0xaa>
					  OLED_WR_DATA(~F6x8[c][i]);
				  else
					  OLED_WR_DATA(F6x8[c][i]);
			    }
		  }
}
 80035a8:	e02f      	b.n	800360a <OLED_ShowChar+0x14e>
				OLED_Set_Pos(x,y);
 80035aa:	79ba      	ldrb	r2, [r7, #6]
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff45 	bl	8003440 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
 80035ba:	e023      	b.n	8003604 <OLED_ShowChar+0x148>
				  if(Color_Turn)
 80035bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00f      	beq.n	80035e4 <OLED_ShowChar+0x128>
					  OLED_WR_DATA(~F6x8[c][i]);
 80035c4:	7bba      	ldrb	r2, [r7, #14]
 80035c6:	7bf9      	ldrb	r1, [r7, #15]
 80035c8:	4813      	ldr	r0, [pc, #76]	@ (8003618 <OLED_ShowChar+0x15c>)
 80035ca:	4613      	mov	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	4413      	add	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4403      	add	r3, r0
 80035d4:	440b      	add	r3, r1
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	43db      	mvns	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff feed 	bl	80033bc <OLED_WR_DATA>
 80035e2:	e00c      	b.n	80035fe <OLED_ShowChar+0x142>
					  OLED_WR_DATA(F6x8[c][i]);
 80035e4:	7bba      	ldrb	r2, [r7, #14]
 80035e6:	7bf9      	ldrb	r1, [r7, #15]
 80035e8:	480b      	ldr	r0, [pc, #44]	@ (8003618 <OLED_ShowChar+0x15c>)
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4403      	add	r3, r0
 80035f4:	440b      	add	r3, r1
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff fedf 	bl	80033bc <OLED_WR_DATA>
				for(i=0;i<6;i++)
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	3301      	adds	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	2b05      	cmp	r3, #5
 8003608:	d9d8      	bls.n	80035bc <OLED_ShowChar+0x100>
}
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bd90      	pop	{r4, r7, pc}
 8003612:	bf00      	nop
 8003614:	08003c10 	.word	0x08003c10
 8003618:	080039e8 	.word	0x080039e8

0800361c <OLED_ShowString>:
 * @param {uint8_t} Char_Size待显示字符串的字体大小,选择字体 16/12，16为8X16，12为6x8
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowString(uint8_t x,uint8_t y,char*chr,uint8_t Char_Size, uint8_t Color_Turn)
{
 800361c:	b590      	push	{r4, r7, lr}
 800361e:	b087      	sub	sp, #28
 8003620:	af02      	add	r7, sp, #8
 8003622:	603a      	str	r2, [r7, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
 800362a:	460b      	mov	r3, r1
 800362c:	71bb      	strb	r3, [r7, #6]
 800362e:	4613      	mov	r3, r2
 8003630:	717b      	strb	r3, [r7, #5]
	uint8_t  j=0;
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8003636:	e02f      	b.n	8003698 <OLED_ShowString+0x7c>
	{		OLED_ShowChar(x,y,chr[j],Char_Size, Color_Turn);
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	4413      	add	r3, r2
 800363e:	781a      	ldrb	r2, [r3, #0]
 8003640:	797c      	ldrb	r4, [r7, #5]
 8003642:	79b9      	ldrb	r1, [r7, #6]
 8003644:	79f8      	ldrb	r0, [r7, #7]
 8003646:	f897 3020 	ldrb.w	r3, [r7, #32]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	4623      	mov	r3, r4
 800364e:	f7ff ff35 	bl	80034bc <OLED_ShowChar>
			if (Char_Size == 12) //6X8的字体列加6，显示下一个字符
 8003652:	797b      	ldrb	r3, [r7, #5]
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d103      	bne.n	8003660 <OLED_ShowString+0x44>
				x += 6;
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	3306      	adds	r3, #6
 800365c:	71fb      	strb	r3, [r7, #7]
 800365e:	e002      	b.n	8003666 <OLED_ShowString+0x4a>
			else  //8X16的字体列加8，显示下一个字符
				x += 8;
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	3308      	adds	r3, #8
 8003664:	71fb      	strb	r3, [r7, #7]

			if (x > 122 && Char_Size==12) //TextSize6x8如果一行不够显示了，从下一行继续显示
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	2b7a      	cmp	r3, #122	@ 0x7a
 800366a:	d907      	bls.n	800367c <OLED_ShowString+0x60>
 800366c:	797b      	ldrb	r3, [r7, #5]
 800366e:	2b0c      	cmp	r3, #12
 8003670:	d104      	bne.n	800367c <OLED_ShowString+0x60>
			{
				x = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	71fb      	strb	r3, [r7, #7]
				y++;
 8003676:	79bb      	ldrb	r3, [r7, #6]
 8003678:	3301      	adds	r3, #1
 800367a:	71bb      	strb	r3, [r7, #6]
			}
			if (x > 120 && Char_Size== 16) //TextSize8x16如果一行不够显示了，从下一行继续显示
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	2b78      	cmp	r3, #120	@ 0x78
 8003680:	d907      	bls.n	8003692 <OLED_ShowString+0x76>
 8003682:	797b      	ldrb	r3, [r7, #5]
 8003684:	2b10      	cmp	r3, #16
 8003686:	d104      	bne.n	8003692 <OLED_ShowString+0x76>
			{
				x = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	71fb      	strb	r3, [r7, #7]
				y++;
 800368c:	79bb      	ldrb	r3, [r7, #6]
 800368e:	3301      	adds	r3, #1
 8003690:	71bb      	strb	r3, [r7, #6]
			}
			j++;
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	3301      	adds	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4413      	add	r3, r2
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1c9      	bne.n	8003638 <OLED_ShowString+0x1c>
	}
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd90      	pop	{r4, r7, pc}
	...

080036b0 <OLED_ShowNum>:
 * @param {uint8_t} size2:输入的数据大小，选择 16/12，16为8X16，12为6x8
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowNum(uint8_t x,uint8_t y,unsigned int num,uint8_t len,uint8_t size2, uint8_t Color_Turn)
{
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	603a      	str	r2, [r7, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
 80036be:	460b      	mov	r3, r1
 80036c0:	71bb      	strb	r3, [r7, #6]
 80036c2:	4613      	mov	r3, r2
 80036c4:	717b      	strb	r3, [r7, #5]
	uint8_t t,temp;
	uint8_t enshow=0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	e055      	b.n	800377c <OLED_ShowNum+0xcc>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 80036d0:	797a      	ldrb	r2, [r7, #5]
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	4619      	mov	r1, r3
 80036de:	200a      	movs	r0, #10
 80036e0:	f7ff fed0 	bl	8003484 <oled_pow>
 80036e4:	4602      	mov	r2, r0
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80036ec:	4b28      	ldr	r3, [pc, #160]	@ (8003790 <OLED_ShowNum+0xe0>)
 80036ee:	fba3 2301 	umull	r2, r3, r3, r1
 80036f2:	08da      	lsrs	r2, r3, #3
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	1aca      	subs	r2, r1, r3
 80036fe:	4613      	mov	r3, r2
 8003700:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 8003702:	7bbb      	ldrb	r3, [r7, #14]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d11f      	bne.n	8003748 <OLED_ShowNum+0x98>
 8003708:	7bfa      	ldrb	r2, [r7, #15]
 800370a:	797b      	ldrb	r3, [r7, #5]
 800370c:	3b01      	subs	r3, #1
 800370e:	429a      	cmp	r2, r3
 8003710:	da1a      	bge.n	8003748 <OLED_ShowNum+0x98>
		{
			if(temp==0)
 8003712:	7b7b      	ldrb	r3, [r7, #13]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d115      	bne.n	8003744 <OLED_ShowNum+0x94>
			{
				OLED_ShowChar(x+(size2/2)*t,y,' ',size2, Color_Turn);
 8003718:	f897 3020 	ldrb.w	r3, [r7, #32]
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	b2da      	uxtb	r2, r3
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	4413      	add	r3, r2
 800372c:	b2d8      	uxtb	r0, r3
 800372e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003732:	79b9      	ldrb	r1, [r7, #6]
 8003734:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	4613      	mov	r3, r2
 800373c:	2220      	movs	r2, #32
 800373e:	f7ff febd 	bl	80034bc <OLED_ShowChar>
				continue;
 8003742:	e018      	b.n	8003776 <OLED_ShowNum+0xc6>
			}else enshow=1;
 8003744:	2301      	movs	r3, #1
 8003746:	73bb      	strb	r3, [r7, #14]

		}
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2, Color_Turn);
 8003748:	f897 3020 	ldrb.w	r3, [r7, #32]
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	7bfa      	ldrb	r2, [r7, #15]
 8003752:	fb02 f303 	mul.w	r3, r2, r3
 8003756:	b2da      	uxtb	r2, r3
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	4413      	add	r3, r2
 800375c:	b2d8      	uxtb	r0, r3
 800375e:	7b7b      	ldrb	r3, [r7, #13]
 8003760:	3330      	adds	r3, #48	@ 0x30
 8003762:	b2da      	uxtb	r2, r3
 8003764:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003768:	79b9      	ldrb	r1, [r7, #6]
 800376a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	4623      	mov	r3, r4
 8003772:	f7ff fea3 	bl	80034bc <OLED_ShowChar>
	for(t=0;t<len;t++)
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	3301      	adds	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	797b      	ldrb	r3, [r7, #5]
 8003780:	429a      	cmp	r2, r3
 8003782:	d3a5      	bcc.n	80036d0 <OLED_ShowNum+0x20>
	}
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	bd90      	pop	{r4, r7, pc}
 800378e:	bf00      	nop
 8003790:	cccccccd 	.word	0xcccccccd

08003794 <OLED_ShowCHinese>:
 * @param {uint8_t} no待显示的汉字编号
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_ShowCHinese(uint8_t x,uint8_t y,uint8_t no, uint8_t Color_Turn)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	4604      	mov	r4, r0
 800379c:	4608      	mov	r0, r1
 800379e:	4611      	mov	r1, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	4623      	mov	r3, r4
 80037a4:	71fb      	strb	r3, [r7, #7]
 80037a6:	4603      	mov	r3, r0
 80037a8:	71bb      	strb	r3, [r7, #6]
 80037aa:	460b      	mov	r3, r1
 80037ac:	717b      	strb	r3, [r7, #5]
 80037ae:	4613      	mov	r3, r2
 80037b0:	713b      	strb	r3, [r7, #4]
	uint8_t t=0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	73fb      	strb	r3, [r7, #15]
	OLED_Set_Pos(x,y);
 80037b6:	79ba      	ldrb	r2, [r7, #6]
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fe3f 	bl	8003440 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	e01e      	b.n	8003806 <OLED_ShowCHinese+0x72>
		{
				if (Color_Turn)
 80037c8:	793b      	ldrb	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <OLED_ShowCHinese+0x56>
					OLED_WR_DATA(~Hzk[2*no][t]); //显示汉字的上半部分
 80037ce:	797b      	ldrb	r3, [r7, #5]
 80037d0:	005a      	lsls	r2, r3, #1
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	4927      	ldr	r1, [pc, #156]	@ (8003874 <OLED_ShowCHinese+0xe0>)
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	440a      	add	r2, r1
 80037da:	4413      	add	r3, r2
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	43db      	mvns	r3, r3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fdea 	bl	80033bc <OLED_WR_DATA>
 80037e8:	e00a      	b.n	8003800 <OLED_ShowCHinese+0x6c>
				else
					OLED_WR_DATA(Hzk[2*no][t]); //显示汉字的上半部分
 80037ea:	797b      	ldrb	r3, [r7, #5]
 80037ec:	005a      	lsls	r2, r3, #1
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	4920      	ldr	r1, [pc, #128]	@ (8003874 <OLED_ShowCHinese+0xe0>)
 80037f2:	0112      	lsls	r2, r2, #4
 80037f4:	440a      	add	r2, r1
 80037f6:	4413      	add	r3, r2
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fdde 	bl	80033bc <OLED_WR_DATA>
    for(t=0;t<16;t++)
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	3301      	adds	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	2b0f      	cmp	r3, #15
 800380a:	d9dd      	bls.n	80037c8 <OLED_ShowCHinese+0x34>
        }

		OLED_Set_Pos(x,y+1);
 800380c:	79bb      	ldrb	r3, [r7, #6]
 800380e:	3301      	adds	r3, #1
 8003810:	b2da      	uxtb	r2, r3
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fe12 	bl	8003440 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 800381c:	2300      	movs	r3, #0
 800381e:	73fb      	strb	r3, [r7, #15]
 8003820:	e020      	b.n	8003864 <OLED_ShowCHinese+0xd0>
		{
				if (Color_Turn)
 8003822:	793b      	ldrb	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00e      	beq.n	8003846 <OLED_ShowCHinese+0xb2>
					OLED_WR_DATA(~Hzk[2*no+1][t]); //显示汉字的上半部分
 8003828:	797b      	ldrb	r3, [r7, #5]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	4910      	ldr	r1, [pc, #64]	@ (8003874 <OLED_ShowCHinese+0xe0>)
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	440a      	add	r2, r1
 8003836:	4413      	add	r3, r2
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	43db      	mvns	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fdbc 	bl	80033bc <OLED_WR_DATA>
 8003844:	e00b      	b.n	800385e <OLED_ShowCHinese+0xca>
				else
					OLED_WR_DATA(Hzk[2*no+1][t]);//显示汉字的上半部分
 8003846:	797b      	ldrb	r3, [r7, #5]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	4909      	ldr	r1, [pc, #36]	@ (8003874 <OLED_ShowCHinese+0xe0>)
 8003850:	0112      	lsls	r2, r2, #4
 8003852:	440a      	add	r2, r1
 8003854:	4413      	add	r3, r2
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fdaf 	bl	80033bc <OLED_WR_DATA>
    for(t=0;t<16;t++)
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	3301      	adds	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b0f      	cmp	r3, #15
 8003868:	d9db      	bls.n	8003822 <OLED_ShowCHinese+0x8e>

         }
}
 800386a:	bf00      	nop
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	bd90      	pop	{r4, r7, pc}
 8003874:	080041f0 	.word	0x080041f0

08003878 <OLED_DrawBMP>:
 * @param {uint8_t} *BMP待显示的图像数据
 * @param {uint8_t} Color_Turn是否反相显示(1反相、0不反相)
 * @return {*}
 */
void OLED_DrawBMP(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t *  BMP,uint8_t Color_Turn)
{
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	4604      	mov	r4, r0
 8003880:	4608      	mov	r0, r1
 8003882:	4611      	mov	r1, r2
 8003884:	461a      	mov	r2, r3
 8003886:	4623      	mov	r3, r4
 8003888:	71fb      	strb	r3, [r7, #7]
 800388a:	4603      	mov	r3, r0
 800388c:	71bb      	strb	r3, [r7, #6]
 800388e:	460b      	mov	r3, r1
 8003890:	717b      	strb	r3, [r7, #5]
 8003892:	4613      	mov	r3, r2
 8003894:	713b      	strb	r3, [r7, #4]
   uint32_t j = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
   uint8_t x = 0, y = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	72fb      	strb	r3, [r7, #11]
 800389e:	2300      	movs	r3, #0
 80038a0:	72bb      	strb	r3, [r7, #10]

  if(y1%8==0)
 80038a2:	793b      	ldrb	r3, [r7, #4]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d103      	bne.n	80038b6 <OLED_DrawBMP+0x3e>
		y = y1/8;
 80038ae:	793b      	ldrb	r3, [r7, #4]
 80038b0:	08db      	lsrs	r3, r3, #3
 80038b2:	72bb      	strb	r3, [r7, #10]
 80038b4:	e004      	b.n	80038c0 <OLED_DrawBMP+0x48>
  else
		y = y1/8 + 1;
 80038b6:	793b      	ldrb	r3, [r7, #4]
 80038b8:	08db      	lsrs	r3, r3, #3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	72bb      	strb	r3, [r7, #10]
	for(y=y0;y<y1;y++)
 80038c0:	79bb      	ldrb	r3, [r7, #6]
 80038c2:	72bb      	strb	r3, [r7, #10]
 80038c4:	e02b      	b.n	800391e <OLED_DrawBMP+0xa6>
	{
		OLED_Set_Pos(x0,y);
 80038c6:	7aba      	ldrb	r2, [r7, #10]
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fdb7 	bl	8003440 <OLED_Set_Pos>
    for(x=x0;x<x1;x++)
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	72fb      	strb	r3, [r7, #11]
 80038d6:	e01b      	b.n	8003910 <OLED_DrawBMP+0x98>
		{
			if (Color_Turn)
 80038d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <OLED_DrawBMP+0x80>
				OLED_WR_DATA(~BMP[j++]);//显示反相图片
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	60fa      	str	r2, [r7, #12]
 80038e6:	6a3a      	ldr	r2, [r7, #32]
 80038e8:	4413      	add	r3, r2
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff fd63 	bl	80033bc <OLED_WR_DATA>
 80038f6:	e008      	b.n	800390a <OLED_DrawBMP+0x92>
			else
				OLED_WR_DATA(BMP[j++]);//显示图片
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	60fa      	str	r2, [r7, #12]
 80038fe:	6a3a      	ldr	r2, [r7, #32]
 8003900:	4413      	add	r3, r2
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fd59 	bl	80033bc <OLED_WR_DATA>
    for(x=x0;x<x1;x++)
 800390a:	7afb      	ldrb	r3, [r7, #11]
 800390c:	3301      	adds	r3, #1
 800390e:	72fb      	strb	r3, [r7, #11]
 8003910:	7afa      	ldrb	r2, [r7, #11]
 8003912:	797b      	ldrb	r3, [r7, #5]
 8003914:	429a      	cmp	r2, r3
 8003916:	d3df      	bcc.n	80038d8 <OLED_DrawBMP+0x60>
	for(y=y0;y<y1;y++)
 8003918:	7abb      	ldrb	r3, [r7, #10]
 800391a:	3301      	adds	r3, #1
 800391c:	72bb      	strb	r3, [r7, #10]
 800391e:	7aba      	ldrb	r2, [r7, #10]
 8003920:	793b      	ldrb	r3, [r7, #4]
 8003922:	429a      	cmp	r2, r3
 8003924:	d3cf      	bcc.n	80038c6 <OLED_DrawBMP+0x4e>

		}
	}
}
 8003926:	bf00      	nop
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bd90      	pop	{r4, r7, pc}

08003930 <memset>:
 8003930:	4603      	mov	r3, r0
 8003932:	4402      	add	r2, r0
 8003934:	4293      	cmp	r3, r2
 8003936:	d100      	bne.n	800393a <memset+0xa>
 8003938:	4770      	bx	lr
 800393a:	f803 1b01 	strb.w	r1, [r3], #1
 800393e:	e7f9      	b.n	8003934 <memset+0x4>

08003940 <__libc_init_array>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	2600      	movs	r6, #0
 8003944:	4d0c      	ldr	r5, [pc, #48]	@ (8003978 <__libc_init_array+0x38>)
 8003946:	4c0d      	ldr	r4, [pc, #52]	@ (800397c <__libc_init_array+0x3c>)
 8003948:	1b64      	subs	r4, r4, r5
 800394a:	10a4      	asrs	r4, r4, #2
 800394c:	42a6      	cmp	r6, r4
 800394e:	d109      	bne.n	8003964 <__libc_init_array+0x24>
 8003950:	f000 f81a 	bl	8003988 <_init>
 8003954:	2600      	movs	r6, #0
 8003956:	4d0a      	ldr	r5, [pc, #40]	@ (8003980 <__libc_init_array+0x40>)
 8003958:	4c0a      	ldr	r4, [pc, #40]	@ (8003984 <__libc_init_array+0x44>)
 800395a:	1b64      	subs	r4, r4, r5
 800395c:	10a4      	asrs	r4, r4, #2
 800395e:	42a6      	cmp	r6, r4
 8003960:	d105      	bne.n	800396e <__libc_init_array+0x2e>
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	f855 3b04 	ldr.w	r3, [r5], #4
 8003968:	4798      	blx	r3
 800396a:	3601      	adds	r6, #1
 800396c:	e7ee      	b.n	800394c <__libc_init_array+0xc>
 800396e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003972:	4798      	blx	r3
 8003974:	3601      	adds	r6, #1
 8003976:	e7f2      	b.n	800395e <__libc_init_array+0x1e>
 8003978:	08004250 	.word	0x08004250
 800397c:	08004250 	.word	0x08004250
 8003980:	08004250 	.word	0x08004250
 8003984:	08004254 	.word	0x08004254

08003988 <_init>:
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	bf00      	nop
 800398c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398e:	bc08      	pop	{r3}
 8003990:	469e      	mov	lr, r3
 8003992:	4770      	bx	lr

08003994 <_fini>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	bf00      	nop
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr
